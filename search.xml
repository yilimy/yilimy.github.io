<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解析excel</title>
      <link href="/2023/06/21/jie-xi-excel/"/>
      <url>/2023/06/21/jie-xi-excel/</url>
      
        <content type="html"><![CDATA[<p>累了，不解释，直接上代码</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="annotation"><a href="#annotation" class="headerlink" title="annotation"></a>annotation</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ExcelColumn</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YJZGradeExcelBusinessPojo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExcelColumn</span><span class="token punctuation">(</span><span class="token string">"申请单位（必填）"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String deptName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelColumn</span><span class="token punctuation">(</span><span class="token string">"系统名称（必填）"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String businessName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelColumn</span><span class="token punctuation">(</span><span class="token string">"统一社会信用代码"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String socialCreditCode<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelColumn</span><span class="token punctuation">(</span><span class="token string">"行政区划"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String region<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExcelService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 将上传的Excel第一个窗口转化为java对象     * @param file 上传的文件对象     * @param mClass 转换后的java对象类型     * @return PO集合     * @param &lt;T> 转换后的java对象类型     */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">readFirstSheetExcel</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> mClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 读取Excel为Java对象     * @param file 上传的文件对象     * @return Excel的java对象     */</span>    Workbook <span class="token function">openExcel</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 将第sheetIndex个窗口的数据，读取为java集合     * 如果行数据为空，默认忽略     * @see this#readExcelWork(Workbook, int, Class, boolean)     * @param workbook Excel的java对象     * @param sheetIndex 窗口序号，从0开始     * @param mClass 读取后的java对象类型     * @return java集合     * @param &lt;T> java对象类型     */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">readExcelWork</span><span class="token punctuation">(</span>Workbook workbook<span class="token punctuation">,</span> <span class="token keyword">int</span> sheetIndex<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> mClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 将第sheetIndex个窗口的数据，读取为java集合     * @param workbook Excel的java对象     * @param sheetIndex 窗口序号，从0开始     * @param mClass 读取后的java对象类型     * @param ignoreEmptyData 是否忽略空数据     * @return java集合     * @param &lt;T> java对象类型     */</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">readExcelWork</span><span class="token punctuation">(</span>Workbook workbook<span class="token punctuation">,</span> <span class="token keyword">int</span> sheetIndex<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> mClass<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ignoreEmptyData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="serviceImpl"><a href="#serviceImpl" class="headerlink" title="serviceImpl"></a>serviceImpl</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ExcelService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">readFirstSheetExcel</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> mClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Workbook sheets <span class="token operator">=</span> <span class="token function">openExcel</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">readExcelWork</span><span class="token punctuation">(</span>sheets<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Workbook <span class="token function">openExcel</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String originalFilename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// excel 表不能通过文件头获取文件类型</span>        String typeName <span class="token operator">=</span> FileUtil<span class="token punctuation">.</span><span class="token function">extName</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">;</span>        Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> isExcel <span class="token operator">=</span> str <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"xls"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// xlsx的文件头是zip格式</span>                <span class="token operator">||</span> <span class="token string">"xlsx"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isExcel<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"文件不是excel, typeName={}"</span><span class="token punctuation">,</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BussJsonException</span><span class="token punctuation">(</span>ErrorEnum<span class="token punctuation">.</span>YJZ_FILE_NOT_EXCEL<span class="token punctuation">,</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"读取文件:{}"</span><span class="token punctuation">,</span> originalFilename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Workbook workbook <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 根据后名创建2003或2007的实例</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"xls"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"create excel 2003"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HSSFWorkbook</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"xlsx"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"create excel 2007"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Excel既不是2003也不是2007"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BussJsonException</span><span class="token punctuation">(</span>ErrorEnum<span class="token punctuation">.</span>YJZ_FILE_NOT_EXCEL<span class="token punctuation">,</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> workbook<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"解析Excel数据失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BussJsonException</span><span class="token punctuation">(</span>ErrorEnum<span class="token punctuation">.</span>YJZ_READ_EXCEL_FAILED<span class="token punctuation">,</span> originalFilename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                IOUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>workbook<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"读取Excel文件失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BussJsonException</span><span class="token punctuation">(</span>ErrorEnum<span class="token punctuation">.</span>YJZ_READ_EXCEL_FAILED<span class="token punctuation">,</span> originalFilename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将Excel对象转换成java集合     * @param workbook 2003和2007的ExcelWork接口类     * @param sheetIndex 窗口序号，从0开始     * @param mClass 转换后的java对象类型     * @return PO集合     * @param &lt;T> 转换后的java对象类型     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">readExcelWork</span><span class="token punctuation">(</span>Workbook workbook<span class="token punctuation">,</span> <span class="token keyword">int</span> sheetIndex<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> mClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">readExcelWork</span><span class="token punctuation">(</span>workbook<span class="token punctuation">,</span> sheetIndex<span class="token punctuation">,</span> mClass<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">readExcelWork</span><span class="token punctuation">(</span>Workbook workbook<span class="token punctuation">,</span> <span class="token keyword">int</span> sheetIndex<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> mClass<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ignoreEmptyData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> numberOfSheets <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getNumberOfSheets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sheetIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>numberOfSheets<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> sheetIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"read sheet={}"</span><span class="token punctuation">,</span> sheetIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取第一个窗口</span>        Sheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span>sheetIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> mClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> mClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从Excel第一行中读取属性字段，并和java对象中的注解进行匹配</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> <span class="token function">sortFieldByHeader</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> declaredFields<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rCount <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            T t <span class="token operator">=</span> <span class="token function">row2Bean</span><span class="token punctuation">(</span>mClass<span class="token punctuation">,</span> sheet<span class="token punctuation">,</span> methods<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ignoreEmptyData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据表头排序 bean 对象属性     * @param row Excel行对象     * @param fields java对象属性     * @return 排序后的属性列表     */</span>    <span class="token keyword">private</span> Field<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortFieldByHeader</span><span class="token punctuation">(</span>Row row<span class="token punctuation">,</span> Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">short</span> cellLength <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getLastCellNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>cellLength<span class="token punctuation">,</span> fields<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Cell cell<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cellLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            String value <span class="token operator">=</span> <span class="token function">getCellValue</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">boolean</span> hasAnnotation <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>ExcelColumn<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hasAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ExcelColumn column <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span>ExcelColumn<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> field<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 读取单元格的内容     * @param cell 单元格对象     * @return 单元格的值     */</span>    <span class="token keyword">private</span> String <span class="token function">getCellValue</span><span class="token punctuation">(</span>Cell cell<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cell <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getCellType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> NUMERIC<span class="token operator">:</span>                DecimalFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getNumericCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> STRING<span class="token operator">:</span>                <span class="token keyword">return</span> cell<span class="token punctuation">.</span><span class="token function">getStringCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> FORMULA<span class="token operator">:</span>                <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getCellFormula</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> BOOLEAN<span class="token operator">:</span>                <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getBooleanCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> BLANK<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ERROR<span class="token operator">:</span>                <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span><span class="token function">getErrorCellValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> _NONE<span class="token operator">:</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将行数据转换成 java bean 对象     *     * @param mClass  bean对象类型     * @param sheet   Excel sheet 对象     * @param methods bean对象方法列表[set方法]     * @param fields  序列化的 bean 对象属性列表     * @param i       行号     * @param &lt;T>     bean对象类型     * @param ignoreEmptyData 是否忽略空数据，true: 遇到空数据时返回null     * @return java Bean对象     */</span>    <span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">row2Bean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> mClass<span class="token punctuation">,</span> Sheet sheet<span class="token punctuation">,</span> Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods<span class="token punctuation">,</span> Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ignoreEmptyData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cell cell<span class="token punctuation">;</span>        Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        T t<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> mClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"create class {} failed ."</span><span class="token punctuation">,</span> mClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> cCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">getLastCellNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fields<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getCell</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            String value <span class="token operator">=</span> <span class="token function">getCellValue</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtil<span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">objSetMethod</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> methods<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                ignoreEmptyData <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ignoreEmptyData<span class="token punctuation">)</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 调用bean对象的set方法     *     * @param obj bean对象     * @param declaredField 属性     * @param methods 方法     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">objSetMethod</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Field declaredField<span class="token punctuation">,</span> Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>declaredField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"{}, {}"</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 注解 </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatisPlus在注解上的问题</title>
      <link href="/2023/06/21/mybatisplus-zai-zhu-jie-shang-de-wen-ti/"/>
      <url>/2023/06/21/mybatisplus-zai-zhu-jie-shang-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>维护一个老项目，并在其中添加迭代一个新功能</p><p>发现依赖库中有mybatisPlus，于是就用了</p><h3 id="依赖不全"><a href="#依赖不全" class="headerlink" title="依赖不全"></a>依赖不全</h3><blockquote><p>Invalid bound statement (not found)</p></blockquote><p>检查发现是直接依赖的mybatis-plus-2.1.0gamma的版本</p><p>改为适配spring的版本，添加dependency</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatisplus-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="Mapper校验失败"><a href="#Mapper校验失败" class="headerlink" title="Mapper校验失败"></a>Mapper校验失败</h3><p>引入starter后，原本正常的Mapper校验不通过了</p><blockquote><p>Dots are not allowed in element names，please remove it from</p></blockquote><p>有issue说是interface和mapper.xml加载顺序的原因，查到的解决方案是mybatisPlus升级到3.1.x</p><p><a href="https://blog.csdn.net/codeblf2/article/details/102687864">建议升级到3.1.x</a></p><p><a href="https://gitee.com/baomidou/mybatis-plus/issues/IYQI9">维护者的讨论</a></p><h3 id="MybatisPlus升级到3-1-0"><a href="#MybatisPlus升级到3-1-0" class="headerlink" title="MybatisPlus升级到3.1.0"></a>MybatisPlus升级到3.1.0</h3><p>2.1升级到3.1，涉及到很多类的包路径变动，比如注解，Page等，改动量很大</p><p>但是start要升级到spring cloud 2.0，这对老项目来说不现实</p><p>放弃升级mybatis-plus</p><h3 id="查源码"><a href="#查源码" class="headerlink" title="查源码"></a>查源码</h3><p>在Mapper.java中出现自定义的resultMapId时，必现</p><ul><li>自定义resultMapId</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"&lt;script> ... &lt;/script> "</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"appMap"</span><span class="token punctuation">,</span>            value <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"systemName"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"system_name"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>PO<span class="token operator">></span> <span class="token function">findSystemCallApproval</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"dto"</span><span class="token punctuation">)</span> DTO dto<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用resultMapId</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"&lt;script> SELECT * FROM table where id =#{id} &lt;/script> "</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"appMap"</span><span class="token punctuation">)</span>PO <span class="token function">findSystemCallApprovalById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在方法 <code>findSystemCallApprovalById</code> 处报错：</p><blockquote><p>Dots are not allowed in element names，please remove it from</p></blockquote><p>报错点为 org.apache.ibatis.builder.MapperBuilderAssistant 中的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">applyCurrentNamespace</span><span class="token punctuation">(</span>String base<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isReference<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>base <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// is it qualified with any namespace yet?</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> base<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// is it qualified with this namespace yet?</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>currentNamespace <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> base<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Dots are not allowed in element names, please remove it from "</span> <span class="token operator">+</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> currentNamespace <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> base<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>该方法在执行时 currentNamespace&#x3D;null，说明是没有找到命名空间</p><p>尝试给该Mapper.java配置Mapper.xml，显示声明命名空间，未果</p><p>尝试调整xml，interface的加载顺序，未果</p><p>继续从源码入手</p><p>使用mybatisPlus后，将Mapper.java注解解释成Mapper对象的是 </p><p><code>com.baomidou.mybatisplus.MybatisMapperAnnotationBuilder</code></p><p>该类是通过继承</p><p><code>org.apache.ibatis.builder.annotation.MapperAnnotationBuilder</code></p><p>修改其中的<code>parse</code>方法来完成的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String resource <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configuration<span class="token punctuation">.</span><span class="token function">isResourceLoaded</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">loadXmlResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">addLoadedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        assistant<span class="token punctuation">.</span><span class="token function">setCurrentNamespace</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">parseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">parseCacheRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO 注入 CURD 动态 SQL (应该在注解之前注入)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BaseMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            GlobalConfigUtils<span class="token punctuation">.</span><span class="token function">getSqlInjector</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inspectInject</span><span class="token punctuation">(</span>assistant<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// issue #237</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">isBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">parseStatement</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncompleteElementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                configuration<span class="token punctuation">.</span><span class="token function">addIncompleteMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">parsePendingMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是在加载方法时，并非是按照java类中的顺序加载的</p><blockquote><p>Method[] methods &#x3D; type.getMethods();</p></blockquote><p>这部分没有继续查下去，因为部分依赖的jar，也使用了resultMapId的方式，意味着不能从Mapper.java的方向去调整</p><p>在执行 <code>parseStatement(method)</code> 方法时，Mapper.java中的方法 <code>findSystemCallApprovalById</code> 有时会比 <code>findSystemCallApproval</code> 优先，从而导致resultMapId&#x3D;appMap不识别</p><p>然后，交给</p><blockquote><p>configuration.addIncompleteMethod(new MethodResolver(this, method));</p></blockquote><p>做延迟处理，但是 <code>MethodResolver</code> 类在做 <code>resolve()</code> 时，使用的方法 <code>parseStatement</code> 是有包访问权限限制的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodResolver</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> MapperAnnotationBuilder annotationBuilder<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> Method method<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">MethodResolver</span><span class="token punctuation">(</span>MapperAnnotationBuilder annotationBuilder<span class="token punctuation">,</span> Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>annotationBuilder <span class="token operator">=</span> annotationBuilder<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    annotationBuilder<span class="token punctuation">.</span><span class="token function">parseStatement</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MapperAnnotationBuilder中的parseStatement方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">parseStatement</span><span class="token punctuation">(</span>Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span></code></pre><p>MybatisMapperAnnotationBuilder虽然继承了MapperAnnotationBuilder，但是父类引用子类实例调用的是父类的受限方法<code>parseStatement</code>，子类重写此方法不算多态，导致resultMapId&#x3D;appMap不识别，问题一步步跳转到MapperBuilderAssistant中去处理了</p><p>然而，受限制的方法找不到好的解决方案</p><p>最后，放弃了使用MybatisPlus的特性，老老实实写xml …</p><h3 id="新版本"><a href="#新版本" class="headerlink" title="新版本"></a>新版本</h3><p>在mybatisPlus-3.4.0中，<code> configuration.addIncompleteMethod</code> 方法将延迟处理的数据交给自定义的 <code>MybatisMethodResolver</code> 而不是 <code>MethodResolver</code></p><p>没有太多的借鉴价值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压测日志</title>
      <link href="/2023/06/16/ya-ce-ri-zhi/"/>
      <url>/2023/06/16/ya-ce-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h4><p><a href="https://jmeter.apache.org/download_jmeter.cgi#source">下载地址</a></p><p>其中Binaries是编译好的版本，Source是源码包</p><p>tgz是Linux版本，zip是windows版本</p><ul><li><p>变更JMeter语言</p><p>找到JMeter配置文件 D:\tools\apache-jmeter-5.5\bin\jmeter.properties</p><p>修改语言（默认英文）：</p><blockquote><p>language&#x3D;zh_CN</p></blockquote></li></ul><h4 id="添加日志切面"><a href="#添加日志切面" class="headerlink" title="添加日志切面"></a>添加日志切面</h4><p>需要开启配置：test.function.cost&#x3D;false</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Around<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>MethodSignature<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnExpression<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 打印方法调用耗时和方法入参 * @author caimeng * @date 2023/06/13 10:58 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnExpression</span><span class="token punctuation">(</span><span class="token string">"${test.function.cost:false}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceDigestAop</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ServiceDigestAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 切面：方法调用时间和方法入参     * @param joinPoint 切点     * @return 方法调用返回数据     * @throws Throwable 调用失败返回的异常     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution (* com.gomain..*.service.impl.*.*(..))"</span> <span class="token operator">+</span>            <span class="token string">"||execution(* com.gomain.api.sign.controller.ShZhStandardController.*(..))"</span> <span class="token operator">+</span>            <span class="token string">"||execution(* com.gomain.sign.feign.SignFeign.*(..))"</span> <span class="token operator">+</span>            <span class="token string">"||execution(* com.gomain.seal.feign.SealQueryFeign.*(..))"</span> <span class="token operator">+</span>            <span class="token string">"||execution(* com.gomain.api.mq.producer.Producer.*(..))"</span> <span class="token operator">+</span>            <span class="token string">"||execution(* com.gomain.calculate.feign.CalculateServiceFeign.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">timeAround</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MethodSignature signature <span class="token operator">=</span> <span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printBeginLog</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            obj <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printErrorLog</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> args<span class="token punctuation">,</span> var10<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> var10<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printExecTime</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> args<span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是否基本数据类型，或字符串类型     * @param clazz 待检测类     * @return 是否基本类型或字符串类型     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> clazz <span class="token operator">==</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是否短字符串     * @param str 待检测字符串     * @return 是否短字符串     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isShortString</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 打印方法开始执行时间点     * @param methodName 方法名     * @param args 方法参数     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printBeginLog</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String param <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateParamDigest</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[{}] begin param [{}]"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 打印方法成功执行后时间点     * @param methodName 方法名     * @param args 方法参数     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printExecTime</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">long</span> startTime<span class="token punctuation">,</span> <span class="token keyword">long</span> endTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String param <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateParamDigest</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[{}] success param [{}] cost {} ms"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> param<span class="token punctuation">,</span> endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 方法执行失败，打印参数和错误消息     * @param methodName 方法名     * @param args 方法参数     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printErrorLog</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String param <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateParamDigest</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        String errormsg <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\s*"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[{}] error param [{}] errmsg [{}]"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> param<span class="token punctuation">,</span> errormsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 简单方法参数     * @param args 方法参数     * @return 方法参数的简易拼接     */</span>    <span class="token keyword">private</span> String <span class="token function">generateParamDigest</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"args is null !"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            StringBuffer argString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> var3 <span class="token operator">=</span> args<span class="token punctuation">;</span>            <span class="token keyword">int</span> var4 <span class="token operator">=</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var5 <span class="token operator">&lt;</span> var4<span class="token punctuation">;</span> <span class="token operator">++</span>var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object arg <span class="token operator">=</span> var3<span class="token punctuation">[</span>var5<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isShortString</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            argString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            argString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        argString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> argString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="配置日志打印文件"><a href="#配置日志打印文件" class="headerlink" title="配置日志打印文件"></a>配置日志打印文件</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>digestLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--encoder 默认配置为PatternLayoutEncoder--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--滚动策略--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--路径--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${LOG_PATH}/digest-%d{yyyy-MM-dd}.%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>500MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--MaxHistory指的是文件数量，超过MaxHistory数量才会删除日志文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--TimeBasedRollingPolicy下logback 启动项目时候 默认不删除多余的文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cleanHistoryOnStart</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cleanHistoryOnStart</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.gomain.api.configuration.ServiceDigestAop<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>digestLog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span></code></pre><h4 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h4><pre class=" language-sh"><code class="language-sh">cat digest-2023-06-13.0.log | grep 'StampServiceImpl_stampApi' | sed -E 's/^.*StampServiceImpl_stampApi.*(cost * ms)$/\1/' | awk '{print $14}'</code></pre><p>第8位是traceId，第14位是耗时</p><p>取平均值</p><pre class=" language-sh"><code class="language-sh">cat data | awk 'BEGIN {sum = 0;line = 0}  {sum += $1;line+=1} END {printf "NR=%d,Average=%3.3fms\n",line,sum*2/line}'</code></pre><p><strong>以上不合适，以下面的为准</strong></p><p>接口调用耗时</p><pre class=" language-sh"><code class="language-sh">cat digest.log | grep 'ShZhStandardController_genCentralizedSignatureSTD' | awk '{if($14!=""){print $14}}'| awk 'BEGIN {sum = 0;line = 0}  {sum += $1;line+=1} END {printf "line=%d,Average=%3.3fms\n",line,sum/line}'</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> shell </tag>
            
            <tag> data </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>站内跳转</title>
      <link href="/2023/06/16/zhan-nei-tiao-zhuan/"/>
      <url>/2023/06/16/zhan-nei-tiao-zhuan/</url>
      
        <content type="html"><![CDATA[<p>Hexo 站内跳转</p><pre class=" language-md"><code class="language-md">{% post_path filename %}</code></pre><p><a href="https://hexo.io/docs/tag-plugins#Include-Posts">官方文档</a></p><p>文档中说的filename是指创建文件时的文件名，</p><p>e.g.</p><blockquote><p>hexo new “站内跳转”</p></blockquote><p>创建文件后，会因为插件等，文件在_posts文件夹中有不同的表现</p><ul><li><p>比如含日期</p></li><li><p>比如中文转拼音</p></li></ul><p>但是文件的filename不会因为这些形式有所改变，依旧是new的时候输入的文件名</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截和分发</title>
      <link href="/2023/06/16/lan-jie-he-fen-fa/"/>
      <url>/2023/06/16/lan-jie-he-fen-fa/</url>
      
        <content type="html"><![CDATA[<p>相关文章：</p><a href="/2023/05/23/lan-jie-he-zhuan-fa/" title="拦截和转发">拦截和转发</a><h3 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h3><p>请求的分发是通过doFilter实现的，可以在同一个拦截器内同时实现转发和分发</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>    HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取请求路径</span>        String uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"/core/web/ycApi/documentVerifySign"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 前端发起的验证请求也需要转发, 去掉web标记</span>            uri <span class="token operator">=</span> <span class="token string">"/core/ycApi/documentVerifySign"</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"/core/web/ycApi/documentVerifySign ==> /core/ycApi/documentVerifySign"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/core/web/ycApi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 页面请求，不做转发</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 转发</span>        <span class="token function">forwardFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"转发服务异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 交给Spring的异常解析器去处理</span><span class="token comment" spellcheck="true">//            exceptionResolver.resolveException(request, response, null, e);</span>        <span class="token comment" spellcheck="true">// 必须得传 HandlerMethod 否则会走GlobalExceptionHandler，而不是指定的YanCaoApiAdvice</span>        <span class="token comment" spellcheck="true">// 没有通过servlet进行分发，因此没有获取到方法对象</span>        <span class="token comment" spellcheck="true">// 如有必要再添加对方法的匹配，这里默认去找Controller的第一个方法</span>        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">(</span>ycController<span class="token punctuation">,</span> ycController<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exceptionResolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="分发的异常处理"><a href="#分发的异常处理" class="headerlink" title="分发的异常处理"></a>分发的异常处理</h3><ul><li><p>一般而言，异常会由HandlerExceptionResolverComposite处理，它包含了Advice注解的异常处理方案。</p></li><li><p>但是有些情况下，请求没有执行到<em>DispatcherServlet</em>的分析，获得到handler不能指向我们需要的Advice，比如文件上传接口，超出了tomcat的最大限制导致的<em>checkMultipart</em>解析失败。</p></li><li><p>因为<em>DispatcherServlet#checkMultipart</em>解析是在<em>DispatcherServlet#getHandler</em>之前，导致异常处理程序因为没有接收到handler而没法交给特定的Advice处理，从而转给全局Advice处理。</p></li></ul><p>目前有两种解决方案</p><ol><li>异常处理前拦截</li><li>异常处理后救场</li></ol><h4 id="方案一：拦截"><a href="#方案一：拦截" class="headerlink" title="方案一：拦截"></a>方案一：拦截</h4><p>异常处理前是指<em>DispatcherServlet#processHandlerException</em>方法内遍历handlerExceptionResolvers时，会先执行<em>DefaultErrorAttributes#resolveException</em>方法，在请求头中设置异常状态</p><pre class=" language-java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>ERROR_ATTRIBUTE<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是在这个过程中如果返回了视图对象<em>ModelAndView</em>，则不会往下执行异常的处理</p><p>因此，我们可以继承<em>DefaultErrorAttributes</em>对象，并注入我们自己的规则，拦截某些请求的异常流程，将请求分发中的异常交由指定的Advice处理。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefaultErrorAttributes</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultErrorAttributes</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> YanCaoApiController ycController<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"handlerExceptionResolver"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> HandlerExceptionResolver exceptionResolver<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 文件上传分发出错导致链路没有解析出mappedHandler     * @see org.springframework.web.servlet.DispatcherServlet#doDispatch(HttpServletRequest, HttpServletResponse)     * @see org.springframework.web.servlet.DispatcherServlet#checkMultipart(HttpServletRequest)     * 单独针对指定路径的文件上传请求做异常处理的指定     * 因为没法指定handler，异常处理会走向全局处理     * @see com.gomain.exception.GlobalExceptionHandler     * 但是可以在异常处理（HandlerExceptionResolver）前，先通过DefaultErrorAttributes返回ModelAndView来提前将拦截掉异常处理     * @see org.springframework.web.servlet.DispatcherServlet#processHandlerException(HttpServletRequest, HttpServletResponse, Object, Exception)     * processHandlerException方法中的handlerExceptionResolvers是优先处理DefaultErrorAttributes，不返回null就可以实现对异常的拦截     * 再次将异常处理交给了ycController对应的Advice，这里随意指定了ycController中的一个方法     * 可以进一步细化到对应的类方法，即实现DispatcherServlet的部分功能     * @param request current HTTP request     * @param response current HTTP response     * @param handler the executed handler, or {@code null} if none chosen at the     * time of the exception (for example, if multipart resolution failed)     * @param ex the exception that got thrown during handler execution     * @return ModelAndView     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">resolveException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"/core/web/ycApi/fileUploadStream"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"文件上传分发失败, uri=/core/web/ycApi/fileUploadStream, error:{}"</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method method<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                method <span class="token operator">=</span> ycController<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"fileUploadStream"</span><span class="token punctuation">,</span> MultipartFile<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"没有找到方法:fileUploadStream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                method <span class="token operator">=</span> ycController<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 指定Advice处理异常</span>            HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">(</span>ycController<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exceptionResolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="方案二：救场"><a href="#方案二：救场" class="headerlink" title="方案二：救场"></a>方案二：救场</h4><p>异常处理后救场是指默认<em>filterChain.doFilter</em>中发生异常，并由我们不认可的异常处理程序处理</p><p>分发链路处理中，并不会抛出异常，我们可以在分发链路执行完成后，检查请求头中是否有异常标记</p><p>通过修改响应体来达成目的</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>    HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>     <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 页面请求，不做转发</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// multipartResolver 检查请求时出错，会导致dispatcher解析不出handler，从而被全局异常捕获</span>            Object dispatcherException <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>DispatcherServlet<span class="token punctuation">.</span>EXCEPTION_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>dispatcherException<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"分发过程中发生异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//TODO 已提交的响应不能重置的解决方案</span>                <span class="token comment" spellcheck="true">// 分发发生异常时交由指定的Advice处理</span>                <span class="token keyword">throw</span> <span class="token punctuation">(</span>Exception<span class="token punctuation">)</span> dispatcherException<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 分发过程中没有发生异常，将进入Controller处理</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"分发异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">(</span>ycController<span class="token punctuation">,</span> ycController<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exceptionResolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是这里有个问题，通过doFilter处理过异常后，response的缓冲区是已提交状态，只能追加数据，不能重置数据</p><p>可以自定义ResponseWrap来达成对缓冲区的修改</p><p>参考：<a href="https://www.jianshu.com/p/5746b5876a46">https://www.jianshu.com/p/5746b5876a46</a></p><p>解决方案有点偏，不尝试了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>list去重再排序</title>
      <link href="/2023/06/12/list-qu-chong-zai-pai-xu/"/>
      <url>/2023/06/12/list-qu-chong-zai-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>基本思路：将stream按照key转成map去重，然后读取map的值，组成集合，集合按照某个属性排序成list</p><p>直接上代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>psSealList<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 执行过滤条件</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>sp <span class="token operator">-</span><span class="token operator">></span> validateNoType<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>validateEffective<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 去重</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>PsSeal<span class="token operator">:</span><span class="token operator">:</span>getEsId<span class="token punctuation">,</span> Function<span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> oldValue<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 可能导致排序变动</span>    <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 根据ID重新排序</span>    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>PsSeal<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iphone和win共享文件</title>
      <link href="/2023/06/08/iphone-he-win-gong-xiang-wen-jian/"/>
      <url>/2023/06/08/iphone-he-win-gong-xiang-wen-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="创建windows共享文件夹"><a href="#创建windows共享文件夹" class="headerlink" title="创建windows共享文件夹"></a>创建windows共享文件夹</h4><p>创建共享文件夹</p><ol><li>创建一个空文件夹</li><li>右键 - 属性 - 共享</li></ol><p>为共享文件夹创建可访问用户</p><ol start="3"><li>高级共享 - 共享此文件夹</li><li>权限 - Everyone - 完全控制</li></ol><p>将可访问用户添加进权限组</p><ol start="5"><li>（右键 - 属性 - 共享）- 共享 - 添加（Everyone）</li><li>Everyone - 读取&#x2F;写入</li></ol><h4 id="win准备好共享"><a href="#win准备好共享" class="headerlink" title="win准备好共享"></a>win准备好共享</h4><p>cmd查询ip</p><pre class=" language-cmd"><code class="language-cmd">ipconfig</code></pre><p>待连接的格式为：smb:&#x2F;&#x2F;ipv4地址</p><p>用户名和密码：windows登录&#x2F;锁屏时显示的用户名，和登录时使用的pin码</p><blockquote><p>非微软账户，使用PC的账户登录机器，使用微软账户登录系统。</p><p>现在的目标是通过iphone连接机器，使用的是PC的登录账户，跟微软账户没关系。</p></blockquote><h4 id="iphone查找共享文件夹"><a href="#iphone查找共享文件夹" class="headerlink" title="iphone查找共享文件夹"></a>iphone查找共享文件夹</h4><p>打开文件app，选中间的共享标签，右上角下拉列表中选中连接服务器</p><p>输入 <code>smb://192.168.15.215</code></p><p>连接身份选“注册用户”，输入名称和密码</p><p>检查状态：</p><p>连接成功后，再次选择“连接服务器”，最近使用的服务器列表中，会显示刚才连接成功的ip</p><h4 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h4><p>打开照片，选择发送，下拉列表中选择【存储到”文件”】，在弹出的对话框中左上角【浏览】【共享】</p><hr><p>参考：<a href="https://zhuanlan.zhihu.com/p/259554390">Windows 和 iPhone 如何快速传输文件 - 知乎 (zhihu.com)</a></p><p>备注：从照片app到文件app有压缩，失望，聊胜于无</p>]]></content>
      
      
      
        <tags>
            
            <tag> win </tag>
            
            <tag> iphone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看源码</title>
      <link href="/2023/06/06/cha-kan-yuan-ma/"/>
      <url>/2023/06/06/cha-kan-yuan-ma/</url>
      
        <content type="html"><![CDATA[<p>如果引入的依赖库没有源码，Ideal会使用反编译插件对.class文件反编译</p><p>要手动查找类，比如：反编译后的文件可以看接口，不能看实现</p><p>如果选择Choose Sources时选中了jar包，可能会提示</p><blockquote><p>IDEA cannot determine what kind of files the chosen items contain. Do you want to attach them as ‘Sources’?</p></blockquote><p>如果依赖库有源码，会在maven库同路径下，有**source.jar文件，上面Choose Sources选中的也是source包，而不是依赖包</p><p>源码打包的方法，pom文件中添加</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-archetype-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-source-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>attach-sources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>verify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>jar-no-fork<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据工具，其二</title>
      <link href="/2023/06/05/shu-ju-gong-ju-qi-er/"/>
      <url>/2023/06/05/shu-ju-gong-ju-qi-er/</url>
      
        <content type="html"><![CDATA[<p>统计行数</p><pre class=" language-sh"><code class="language-sh">wc -l</code></pre><p>查看docker服务日志</p><pre class=" language-sh"><code class="language-sh">docker ps | grep template | awk '{print $1}' | xargs  docker logs -f --tail=100</code></pre><p>awk 表述行取值</p><p>xargs 表示参数传入</p><h4 id="awk列过滤的其他案例"><a href="#awk列过滤的其他案例" class="headerlink" title="awk列过滤的其他案例"></a>awk列过滤的其他案例</h4><p>第一列为d2d6812cb25a，第二列以gomain开头，format结尾，然后打印整条数据</p><pre class=" language-sh"><code class="language-sh">docker ps | awk '$1 == "d2d6812cb25a" && $2 ~ /^g.*t$/  {print $0}'</code></pre><p>其中$1如果比较的是数字，不加引号，字符串需要加引号</p><p>单个*不能表示字符省略，需要配合点号</p><p>awk本身是一种编程语言</p><pre class=" language-sh"><code class="language-sh">docker ps | awk 'BEGIN {line = 0}  {line += 1} END {print line} '</code></pre><p>共计有40条记录</p><p>过滤出g开头的</p><pre class=" language-sh"><code class="language-sh">docker ps | awk 'BEGIN {line = 0} $2 ~ /^g.*/ {line += 1} END {print line} '</code></pre><p>共计33条记录</p><p>备注 BEGIN 和 END 必须大写</p><h4 id="bc工具"><a href="#bc工具" class="headerlink" title="bc工具"></a>bc工具</h4><p>paste命令可用于合并文件的列</p><p>打印下序列 0~40</p><pre class=" language-sh"><code class="language-sh">docker ps | awk 'BEGIN {i = 0} {print i++} END {print i}'</code></pre><p>使用paste拼接</p><pre class=" language-sh"><code class="language-sh">docker ps | awk 'BEGIN {i = 0} {print i++} END {print i}' | paste -sd+</code></pre><p>效果为:</p><blockquote><p>0+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33+34+35+36+37+38+39+40</p></blockquote><p>s是串行 –serial</p><p>d是用指定的间隔字符取代跳格字符，上例中使用的是加号</p><p>上述命令有以下几个变种</p><pre class=" language-sh"><code class="language-sh"># 1docker ps | awk 'BEGIN {i = 0} {print i++} END {print i}' | paste -sd +# 2docker ps | awk 'BEGIN {i = 0} {print i++} END {print i}' | paste -s -d +# 3docker ps | awk 'BEGIN {i = 0} {print i++} END {print i}' | paste -d + -s</code></pre><p>结果一致</p><p>使用bc计算以上的值</p><pre class=" language-sh"><code class="language-sh">docker ps | awk 'BEGIN {i = 0} {print i++} END {print i}' | paste -sd+ | bc -l</code></pre><p>l表示使用标准的数学库</p><blockquote><p>-l, –mathlib<br>              Define the standard math library.</p></blockquote><p>其实不加 l 也能计算</p><pre class=" language-sh"><code class="language-sh">docker ps | awk 'BEGIN {i = 0} {print i++} END {print i}' | paste -sd+ | bc</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机教育中缺失的一课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新搭建hexo</title>
      <link href="/2023/06/01/chong-xin-da-jian-hexo/"/>
      <url>/2023/06/01/chong-xin-da-jian-hexo/</url>
      
        <content type="html"><![CDATA[<p>安装node.js</p><p>设置npm代理，数据源（淘宝）</p><pre class=" language-sh"><code class="language-sh">npm config set registry https://registry.npm.taobao.org</code></pre><p>查看镜像源</p><pre class=" language-cmd"><code class="language-cmd">npm get registry</code></pre><p>代理</p><pre class=" language-cmd"><code class="language-cmd"># 设置代理npm config set proxy http://server:port# 查询当前代理npm config get proxy</code></pre><p>npm的其他配置查询，比如缓存地址等</p><pre class=" language-cmd"><code class="language-cmd">C:\Users\EDY>npm config ls; "builtin" config from D:\Program Files\nodejs\node_modules\npm\npmrc; prefix = "C:\\Users\\EDY\\AppData\\Roaming\\npm" ; overridden by user; "user" config from C:\Users\EDY\.npmrccache = "D:\\Program Files\\nodejs\\node_cache"prefix = "D:\\Program Files\\nodejs\\node_global"registry = "https://registry.npm.taobao.org/"; node bin location = D:\Program Files\nodejs\node.exe; node version = v18.16.0; npm local prefix = C:\Users\EDY; npm version = 9.5.1; cwd = C:\Users\EDY; HOME = C:\Users\EDY; Run `npm config ls -l` to show all defaults.</code></pre><p>参考：</p><p><a href="https://www.jianshu.com/p/30ba1da2bde1">npm、yarn设置全局安装位置和缓存位置 - 简书 (jianshu.com)</a></p><p>安装hexo</p><pre class=" language-cmd"><code class="language-cmd">npm install -g hexo-cli</code></pre><p>查询安装地址</p><pre class=" language-cmd"><code class="language-cmd">npm list --depth=0 -g</code></pre><p>得到结果</p><blockquote><p>D:\Program Files\nodejs\node_global<br>&#96;– <a href="mailto:&#104;&#101;&#120;&#x6f;&#x2d;&#x63;&#108;&#x69;&#x40;&#x34;&#x2e;&#51;&#46;&#x31;">&#104;&#101;&#120;&#x6f;&#x2d;&#x63;&#108;&#x69;&#x40;&#x34;&#x2e;&#51;&#46;&#x31;</a></p></blockquote><p>把上述地址添加到环境变量中</p><p>重启电脑使环境变量生效</p><p>无法加载脚本</p><blockquote><p>无法加载文件 D:\Program Files\nodejs\node_global\hexo.ps1，因为在此系统上禁止运行脚本</p></blockquote><p>解决方案：</p><p>设置 – 隐私和安全性 – 开发者选项 – 允许本地PowerShell脚本在未签名的情况下运行</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/29/hello-world/"/>
      <url>/2023/05/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据工具</title>
      <link href="/2023/05/24/shu-ju-gong-ju/"/>
      <url>/2023/05/24/shu-ju-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>来自于《计算机教育中缺失的一课》04</p><h4 id="简单正则"><a href="#简单正则" class="headerlink" title="简单正则"></a>简单正则</h4><p>将字符中a或者b抹除（替换为空字符），并输出</p><pre class=" language-sh"><code class="language-sh">echo 'abcaba' | sed -E 's/[ab]//'</code></pre><p>输出结果：bcaba</p><p>以上，正则只匹配一次，要多次匹配，在后面加g</p><pre class=" language-sh"><code class="language-sh">echo 'abcaba' | sed -E 's/[ab]//g'</code></pre><p>输出结果：c</p><p>有些指令并并不会生效，比如</p><pre class=" language-sh"><code class="language-sh">echo 'abcaba' | sed 's/(ab)*//g'</code></pre><p>输出结果：abcaba</p><p>我们需要添加参数E，使其支持更新的语法</p><pre class=" language-sh"><code class="language-sh">echo 'abcaba' | sed -E 's/(ab)*//g'</code></pre><p>输出结果：ca</p><p>或者通过转义符，告诉程序括号为括号</p><pre class=" language-sh"><code class="language-sh">echo 'abcaba' | sed 's/\(ab\)*//g'</code></pre><p>输出结果：ca</p><p>匹配后是即时删除的，比如</p><pre class=" language-sh"><code class="language-sh">echo 'abcababc' | sed -E 's/(ab|bc)*//g'</code></pre><p>输出结果：cc</p><p>[在线正则网站]<a href="https://regex101.com/">https://regex101.com/</a></p><h4 id="综合正则"><a href="#综合正则" class="headerlink" title="综合正则"></a>综合正则</h4><blockquote><p>vim 进入api-controller.log后，使用  “:%s  + 正则” 的方式可能查找不出来，或许跟行匹配有关</p><p>暂时没有找到原因</p></blockquote><p>读取日志</p><pre class=" language-sh"><code class="language-sh">cat api-controller.log</code></pre><p>过滤关键字，此时管道中的数据是按行输出，为之后的正则匹配提供了条件</p><pre class=" language-sh"><code class="language-sh">grep '源文件路径'</code></pre><p>对过滤出的每一行日志按正则过滤，并按组输出（起始组：1）</p><pre class=" language-sh"><code class="language-sh">sed -E 's/^.*\[([0-9a-z]{32})\]: .*:(esus.*pdf)$/\2/'</code></pre><p>其中 “\2” 表示第二组，正则中的小括号表示结果分组</p><p>打印组数据</p><pre class=" language-sh"><code class="language-sh">awk '{print $0}'</code></pre><p>以数据源为例：</p><p>2023-05-24 16:49:03.565 INFO  [http-nio-9001-exec-6] [c.b.c.s.w.c.DeleteSourceAspect_after:123] - [a9f3e9082bef43519c5d1917092d61ba]: 源文件路.:esus/web/2023/5/24/f8f79256991e27cbad615e406d9fd499439fbd044adf02cc4b183c9e0f39b23fgdfileflag82b-4433-837d-d14d5451.pdf</p><blockquote><p>查询链路ID：</p></blockquote><pre class=" language-sh"><code class="language-sh">cat api-controller.log | grep '源文件路径' | sed -E 's/^.*\[([0-9a-z]{32})\]: .*:(esus.*pdf)$/\1/' | awk '{print $1}'</code></pre><p>输出为：a9f3e9082bef43519c5d1917092d61ba</p><blockquote><p>查询文件路径：</p></blockquote><pre class=" language-sh"><code class="language-sh">cat api-controller.log | grep '源文件路径' | sed -E 's/^.*\[([0-9a-z]{32})\]: .*:(esus.*pdf)$/\2/' | awk '{print $1}'</code></pre><p>输出为：esus&#x2F;web&#x2F;2023&#x2F;5&#x2F;24&#x2F;f8f79256991e27cbad615e406d9fd499439fbd044adf02cc4b183c9e0f39b23fgdfileflag82b-4433-837d-d14d5451.pdf</p><p>更多参考：[数据整理] <a href="https://missing-semester-cn.github.io/2020/data-wrangling/">https://missing-semester-cn.github.io/2020/data-wrangling/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> data </tag>
            
            <tag> 计算机教育中缺失的一课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截和转发</title>
      <link href="/2023/05/23/lan-jie-he-zhuan-fa/"/>
      <url>/2023/05/23/lan-jie-he-zhuan-fa/</url>
      
        <content type="html"><![CDATA[<p>相关文章：</p><a href="/2023/06/16/lan-jie-he-fen-fa/" title="拦截和分发">拦截和分发</a><h4 id="策略注入"><a href="#策略注入" class="headerlink" title="策略注入"></a>策略注入</h4><p>针对所有的 &#x2F;core&#x2F;ycApi 的接口路径进行拦截，拦截器为 YcForwardFilter。</p><p>存在 YcForwardFilter 实例时注入该策略</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>YcForwardFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> FilterRegistrationBean <span class="token function">myFilterRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FilterRegistrationBean registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注入过滤器</span>    registration<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>ycForwardFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置拦截规则</span>    registration<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/core/ycApi/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置拦截名称</span>    registration<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"ycFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置拦截顺序</span>    registration<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> registration<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>拦截器需要实现接口 Filter 中的 doFilter 方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拦截的逻辑</span><span class="token punctuation">}</span></code></pre><h4 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h4><p>拦截到请求后，可使用 filterChain 留在系统中处理，也可以转发出去</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">forwardFilter</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取转发路径</span>    String forwardUrl <span class="token operator">=</span> <span class="token function">getUrlByRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpRequestBase httpRequestBase <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 请求地址</span>    String uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此处为 application/x-www-form-urlencoded</span>    String query <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String urlParam <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>        query<span class="token punctuation">,</span>        Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>appKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"appkey="</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"random="</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"digest="</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"&amp;&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String newUrl <span class="token operator">=</span> forwardUrl <span class="token operator">+</span> uri <span class="token operator">+</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>urlParam<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"?"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接口转发：newUrl={}"</span><span class="token punctuation">,</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 设置请求方式</span>    String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求方式：method={}"</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>GET<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        httpRequestBase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span>newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        httpRequestBase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 设置请求头</span>    <span class="token function">copyRequestHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> httpRequestBase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重置请求头中的认证信息</span>    <span class="token comment" spellcheck="true">//        resetAuthInfo(httpRequestBase);</span>    <span class="token comment" spellcheck="true">// 4. 设置POST参数</span>    String contentType <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"contentType={}"</span><span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequestBase <span class="token keyword">instanceof</span> <span class="token class-name">HttpPost</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// application/json</span>            BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String body <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 请求中的空格不能去，为了发现空格</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request body={}"</span><span class="token punctuation">,</span> StrUtil<span class="token punctuation">.</span><span class="token function">brief</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpPost<span class="token punctuation">)</span> httpRequestBase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span>MULTIPART_FORM_DATA<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// multipart/form-data</span>            <span class="token function">copyFormData</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> httpRequestBase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"不支持 application/json、multipart/form-data 之外的POST类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. 连接设置</span>    RequestConfig config <span class="token operator">=</span> RequestConfig<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setConnectionRequestTimeout</span><span class="token punctuation">(</span>connectionRequestTimeout<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setSocketTimeout</span><span class="token punctuation">(</span>socketTimeout<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>connectionTimeout<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    httpRequestBase<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 6. 提交请求</span>    CloseableHttpClient httpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CloseableHttpResponse execute <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpRequestBase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印结果需要读取流，尽量不要对源数据进行处理，只打印响应码</span>    <span class="token keyword">int</span> statusCode <span class="token operator">=</span> execute<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"响应结果码：{}"</span><span class="token punctuation">,</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 7. 返回前的处理</span>    HttpEntity responseEntity <span class="token operator">=</span> execute<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 8. 设置响应头</span>    Header<span class="token punctuation">[</span><span class="token punctuation">]</span> responseHeaders <span class="token operator">=</span> execute<span class="token punctuation">.</span><span class="token function">getAllHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Header header <span class="token operator">:</span> responseHeaders<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Content-Length 和 Content-Encoding 不能同时存在，故两个属性都不复制</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>HTTP<span class="token punctuation">.</span>CONTENT_LEN<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span> HTTP<span class="token punctuation">.</span>TRANSFER_ENCODING<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"response header name={}, value={}"</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 复制响应头</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 9. 转发结果写入响应体</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> HttpStatus<span class="token punctuation">.</span>SC_NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 针对404单独处理</span>        <span class="token function">response404</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        responseEntity<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 针对404单独处理  * @param response 响应体  * @param path 请求URI  */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">response404</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> String path<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>ServletOutputStream outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        YcRspBase rsp404 <span class="token operator">=</span> YcRspBase<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span><span class="token string">"404"</span><span class="token punctuation">,</span> <span class="token string">"Not Found : "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>SC_NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str404 <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>rsp404<span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str404<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"写入数据到response失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 复制 POST 请求 form-data 请求方式中的请求数据  *  * @param request         待复制请求  * @param httpRequestBase 转发请求  * @throws IOException  * @throws ServletException  */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">copyFormData</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpRequestBase httpRequestBase<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 附带文件的请求，contentType后有数据描述，小数据为base64的值，大数据疑似为文件大小</span>    <span class="token comment" spellcheck="true">// e.g. multipart/form-data; boundary=--------------------------394758598706425280136232</span>    MultipartEntityBuilder entityBuilder <span class="token operator">=</span> MultipartEntityBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 防止中文文件名导致的乱码</span>        <span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span>HttpMultipartMode<span class="token punctuation">.</span>RFC6532<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// multipart/form-data 时才能获取，否则报错</span>    Collection<span class="token operator">&lt;</span>Part<span class="token operator">></span> parts <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数据为文件时，Content-Type 中含有长度信息 [boundary]，需要去除长度</span>        httpRequestBase<span class="token punctuation">.</span><span class="token function">removeHeaders</span><span class="token punctuation">(</span>HTTP<span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Part part <span class="token operator">:</span> parts<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                InputStream is <span class="token operator">=</span> part<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                entityBuilder<span class="token punctuation">.</span><span class="token function">addBinaryBody</span><span class="token punctuation">(</span>                    part<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    is<span class="token punctuation">,</span>                    ContentType<span class="token punctuation">.</span>APPLICATION_OCTET_STREAM<span class="token punctuation">,</span>                    part<span class="token punctuation">.</span><span class="token function">getSubmittedFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"copy part failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 流读取放在 getParameterMap 之前，防止读取一次后数据丢失</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 多个重复的 k 会在 v[] 数组中处理，一般不建议传数组 or 后续再处理</span>    <span class="token comment" spellcheck="true">//        parameterMap.forEach((k, v) -> entityBuilder.addTextBody(k, v[0]));</span>    parameterMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> entityBuilder<span class="token punctuation">.</span><span class="token function">addTextBody</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpPost<span class="token punctuation">)</span> httpRequestBase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entityBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 复制请求中的请求头  * &lt;p>  * 1. 不能设置 Content-Length 的值，让 CloseableHttpClient 自动设置  * 2. multipart/form-data 不能复制请求头，错误的请求头，会导致接收端文件读取不到，委托 CloseableHttpClient 自动设置  *  * @param request         原请求  * @param httpRequestBase 转发请求  */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">copyRequestHeader</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpRequestBase httpRequestBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> headerNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>headerNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> headerNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>HTTP<span class="token punctuation">.</span>CONTENT_LEN<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不设置header长度</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String value <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"request header key={}, value={}"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpRequestBase<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h4><h5 id="spring处理异常"><a href="#spring处理异常" class="headerlink" title="spring处理异常"></a>spring处理异常</h5><p>需要借助 HandlerExceptionResolver 异常处理器来协助我们处理局部异常</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"handlerExceptionResolver"</span><span class="token punctuation">)</span><span class="token keyword">private</span> HandlerExceptionResolver exceptionResolver<span class="token punctuation">;</span></code></pre><p>HandlerExceptionResolver 是个多实例注入对象，Spring MVC 使用的实例名为 handlerExceptionResolver<br>但是注入的也不是单个处理器，而是 HandlerExceptionResolverComposite 对象，持有多个处理器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerExceptionResolverComposite</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>HandlerExceptionResolver<span class="token operator">></span> resolvers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> order <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>通过处理器中的 resolveException 方法，将拦截器中的异常捕获并统一处理</p><pre class=" language-java"><code class="language-java">exceptionResolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> null<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上方法会将异常交给spring处理</p><h5 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h5><p>有时因对接不同的系统，要求不同的返回数据结构，我们会要求指定异常处理类</p><p>获取该controller的引用（也许不需要）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> YcApiController ycController<span class="token punctuation">;</span></code></pre><p>在 resolveException 指定方法handler对象</p><pre class=" language-java"><code class="language-java">HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">(</span>ycController<span class="token punctuation">,</span> ycController<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exceptionResolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>正常情况下，请求在servlet分发时，会匹配到 HandlerMethod</p><p>如果没有特别的需求，找到controller对应的Advice即可</p><p>备注，exceptionResolver在处理 basePackageClasses 指定的类时，匹配的是同包及其子包</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> ServletInvocableHandlerMethod <span class="token function">getExceptionHandlerMethod</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> HandlerMethod handlerMethod<span class="token punctuation">,</span> Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> handlerType <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法handler在这里转换成类型</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handlerMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        handlerType <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getBeanType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExceptionHandlerMethodResolver resolver <span class="token operator">=</span> <span class="token punctuation">(</span>ExceptionHandlerMethodResolver<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionHandlerCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolver <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionHandlerMethodResolver</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>exceptionHandlerCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> resolver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>var9<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>ControllerAdviceBean<span class="token punctuation">,</span> ExceptionHandlerMethodResolver<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>var9<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ControllerAdviceBean advice <span class="token operator">=</span> <span class="token punctuation">(</span>ControllerAdviceBean<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 这里会检查basePackages和类型，handlerType为空将交由下一个Advice处理异常</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>advice<span class="token punctuation">.</span><span class="token function">isApplicableToBeanType</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             ExceptionHandlerMethodResolver resolver <span class="token operator">=</span> <span class="token punctuation">(</span>ExceptionHandlerMethodResolver<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Method method <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolveMethod</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletInvocableHandlerMethod</span><span class="token punctuation">(</span>advice<span class="token punctuation">.</span><span class="token function">resolveBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在Advice类头指定basePackages时的生效地</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// org.springframework.web.method.HandlerTypePredicate</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasSelectors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// basePackages 是以'com.xx.xxx.'方式存储，表示的是注解的当前包及其子包</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>basePackages<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>assignableTypes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>annotations<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>    HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 转发</span>        <span class="token function">forwardFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"转发服务异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 交给Spring的异常解析器去处理</span>        <span class="token comment" spellcheck="true">//            exceptionResolver.resolveException(request, response, null, e);</span>        <span class="token comment" spellcheck="true">// 必须得传 HandlerMethod 否则会走GlobalExceptionHandler，而不是指定的YcApiAdvice</span>        <span class="token comment" spellcheck="true">// 没有通过servlet进行分发，因此没有获取到方法对象</span>        <span class="token comment" spellcheck="true">// 如有必要再添加对方法的匹配，这里默认去找Controller的第一个方法</span>        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">(</span>ycController<span class="token punctuation">,</span> ycController<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exceptionResolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="自定义异常捕获"><a href="#自定义异常捕获" class="headerlink" title="自定义异常捕获"></a>自定义异常捕获</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 会捕获指定类[basePackageClasses]同包及其子包下的异常 * 拥有类包及其子包下异常捕获的最高优先级 * * @author ** * @date 2023/04/18 09:42:50 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> YcApiController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YcApiAdvice</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 参数校验未通过     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> YcRspBase <span class="token function">methodArgumentNotValidExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"MethodArgumentNotValidException {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectError objectError <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> YcRspBase<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span><span class="token string">"80111016"</span><span class="token punctuation">,</span> objectError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/2023/05/22/vim/"/>
      <url>/2023/05/22/vim/</url>
      
        <content type="html"><![CDATA[<p>来自于《计算机教育中缺失的一课》03 Editors（vim）</p><h4 id="普通指令"><a href="#普通指令" class="headerlink" title="普通指令"></a>普通指令</h4><p>分窗<code>:sp</code> 使用<code>ctrl+w</code>在两个窗口之间进行切换（并非同行），使用<code>:qa</code>关闭所有窗口</p><p>普通模式下，使用j（jump）跳到下一行，使用k返回上一行，光标移动键：hjkl</p><p>光标按单词移动：wbe，w下一个单词，b上一个单词，e（下一个）单词尾</p><p>移动到行首：0，其他数字没效果</p><p>移动到行首：^</p><p>移动到行尾：$</p><p>上下滚动：ctrl+U,ctrl+D：upper和down</p><p>顶底切换：shift + g移动到文档底部，gg移动到文档顶部</p><p>在当前视图页移动：L（视图底 lower），M（视图中央行首 middle），H（视图顶 Header）<br>当前行中查找： f+要查找的字母或数字，查找范围：(光标位置，行尾]，查找目标区分大小写，不支持next</p><p>当前行中反向查找： F+要查找的字母或数字</p><p>删除：x删除单个字符，dw删除单词，de删除至单词尾</p><p>撤销：u（undo）</p><p>复制粘贴：yp，y复制，yy复制行，yw复制单词，p粘贴</p><p>配合视图模式（v）和光标操作（hjkl）来复制指定的文本</p><p>shift + v（V）进入行视图模式</p><p>ctrl + v 进入视图块模式</p><h4 id="组合指令"><a href="#组合指令" class="headerlink" title="组合指令"></a>组合指令</h4><p>跳到上一个单词，进入视图模式，选中下三个单词</p><pre class=" language-vim"><code class="language-vim">bveee</code></pre><p>向下跳4行</p><pre class=" language-vim"><code class="language-vim">4j</code></pre><p>向上跳4行</p><pre class=" language-vim"><code class="language-vim">4k</code></pre><p>删除7个单词</p><pre class=" language-vim"><code class="language-vim">7dw</code></pre><p>删除中括号中的数据，并开始插入（比如md文件）</p><pre class=" language-vim"><code class="language-vim"><span class="token builtin">ci</span><span class="token punctuation">[</span></code></pre><p>同理小括号</p><pre class=" language-vim"><code class="language-vim"><span class="token function">ci</span><span class="token punctuation">(</span></code></pre><p>在括号上可以使用百分号（%）在两端左右横跳</p><p>删除括号及其内容</p><pre class=" language-vim"><code class="language-vim"><span class="token function">da</span><span class="token punctuation">(</span></code></pre><p>重复上一次的编辑命令：逗号</p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> vim </tag>
            
            <tag> 计算机教育中缺失的一课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本其二</title>
      <link href="/2023/05/22/shell-jiao-ben-qi-er/"/>
      <url>/2023/05/22/shell-jiao-ben-qi-er/</url>
      
        <content type="html"><![CDATA[<p>来自于《计算机教育中缺失的一课》02</p><h4 id="shell脚本其二"><a href="#shell脚本其二" class="headerlink" title="shell脚本其二"></a>shell脚本其二</h4><p>查询符合要求的文件，并执行删除</p><pre class=" language-sh"><code class="language-sh"># 查询文件:文件夹名称以node开头，类型为文件夹，修改时间为1天find . -name "node*" -type d -mtime -l# 查找缓存文件find . -name "*.tmp" # 查找并删除find . -name "*.tmp" -exec rm {} \;# 查看上一次执行命令的结果echo $?</code></pre><p>查看文件树</p><pre class=" language-sh"><code class="language-sh">tree</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 计算机教育中缺失的一课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解标记要修改的属性</title>
      <link href="/2023/05/19/zhu-jie-biao-ji-yao-xiu-gai-de-shu-xing/"/>
      <url>/2023/05/19/zhu-jie-biao-ji-yao-xiu-gai-de-shu-xing/</url>
      
        <content type="html"><![CDATA[<h4 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h4><blockquote><ul><li><p>根据注解 SealAuthId 去查找要标记位的属性，并修改其值</p></li><li><p>如果直属属性中没有修改的属性，而是在其子孙属性中，则通过 SealAuthId (CONTAIN) 引导程序到子属性中去查找</p></li><li><p>直到找到标记 SealAuthId (AUTH_ID) 的属性，执行修改方法</p></li></ul></blockquote><h4 id="标记属性"><a href="#标记属性" class="headerlink" title="标记属性"></a>标记属性</h4><p>待处理对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YcDTO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SealAuthId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> SealAuthId<span class="token punctuation">.</span>CONTAIN<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Valid</span>    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"信息列表[dataList]不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>YcSignatories<span class="token operator">></span> dataList<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>子对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YcSignatories</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SealAuthId</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"编码[sealId]不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String sealId<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="注解查找"><a href="#注解查找" class="headerlink" title="注解查找"></a>注解查找</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 找到dto对象中注解标记的 SealAuthId(AUTH_ID) 并执行方法 function  * @param dto 待查找的对象  * @param function 找到注解标记后执行的方法  */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findAnnotationAndDo</span><span class="token punctuation">(</span>Object dto<span class="token punctuation">,</span> Function function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"dto is NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> parameterObjectClass <span class="token operator">=</span> dto<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> parameterObjectClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span><span class="token punctuation">{</span>        SealAuthId sealAuthId <span class="token operator">=</span> AnnotationUtils<span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> SealAuthId<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>sealAuthId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"查找到注解@SealAuthId[{}]"</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>SealAuthId<span class="token punctuation">.</span>AUTH_ID<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sealAuthId<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">annotateParameterDo</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> field<span class="token punctuation">,</span> function<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>SealAuthId<span class="token punctuation">.</span>CONTAIN<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sealAuthId<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">annotateContainSearch</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> field<span class="token punctuation">,</span> function<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 查找到包含注解的对象，准备进行下一步查找  * 在标记 CONTAIN 属性中继续查找，直到查找到标记 AUTH_ID  * @param dto 待查找的对象  * @param function 找到注解标记 AUTH_ID 后执行的方法  * @param field 注解标记为“CONTAIN”的属性  */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">annotateContainSearch</span><span class="token punctuation">(</span>Object dto<span class="token punctuation">,</span> Field field<span class="token punctuation">,</span> Function function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>field<span class="token punctuation">.</span><span class="token function">isAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object objContain <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>objContain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{} is NULL, continue."</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 属性有值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Collection<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{} is collection"</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Iterator iterator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> objContain<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 遍历查询集合中的对象中的注解</span>                <span class="token comment" spellcheck="true">// 因为是从请求参数中反序列化得来的，暂时不考虑循环引用问题</span>                <span class="token function">findAnnotationAndDo</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> function<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{} is obj"</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 因为是从请求参数中反序列化得来的，暂时不考虑循环引用问题</span>            <span class="token function">findAnnotationAndDo</span><span class="token punctuation">(</span>objContain<span class="token punctuation">,</span> function<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 查找到注解标记 AUTH_ID 的属性，执行操作  * @param dto 待查找的对象  * @param function 找到注解标记 AUTH_ID 后执行的方法  * @param field 注解标记为 AUTH_ID 的属性  */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">annotateParameterDo</span><span class="token punctuation">(</span>Object dto<span class="token punctuation">,</span> Field field<span class="token punctuation">,</span> Function function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>field<span class="token punctuation">.</span><span class="token function">isAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原值</span>        Object localValue <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 修改值的方法效用</span>            Object apply <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>localValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过对象的setter方法重置属性的值</span>            field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> apply<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"修改注解标记的{}: {} => {}"</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> localValue<span class="token punctuation">,</span> apply<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defaultBind</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">,</span> SealBind sealBind<span class="token punctuation">)</span><span class="token punctuation">{</span>    Object param <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    SealAuthUtils<span class="token punctuation">.</span><span class="token function">findAnnotationAndDo</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> sealCode <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>sealCode<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sealCode <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">findSealCodeByAuthId</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> sealCode<span class="token punctuation">,</span> sealBind<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 维持不变</span>        <span class="token keyword">return</span> sealCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> annotate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo调试_其一</title>
      <link href="/2023/05/17/hexo-diao-shi-qi-yi/"/>
      <url>/2023/05/17/hexo-diao-shi-qi-yi/</url>
      
        <content type="html"><![CDATA[<h4 id="编译忽略文件或文件夹"><a href="#编译忽略文件或文件夹" class="headerlink" title="编译忽略文件或文件夹"></a>编译忽略文件或文件夹</h4><p>场景：将source添加到git仓库，hexo server报错</p><pre class=" language-cmd"><code class="language-cmd">INFO  Validating configINFO  Start processingINFO  Hexo is running at http://localhost:5555/ . Press Ctrl+C to stop.Unhandled rejection WarehouseError: ID `source/.git/logs/refs/heads/main` has been used    at new WarehouseError (D:\GitHub\hexo\pagesHexo2023\node_modules\warehouse\lib\error.js:14:11)    at _Model._insertOne (D:\GitHub\hexo\pagesHexo2023\node_modules\warehouse\lib\model.js:153:29)    at D:\GitHub\hexo\pagesHexo2023\node_modules\warehouse\lib\model.js:179:63    at tryCatcher (D:\GitHub\hexo\pagesHexo2023\node_modules\bluebird\js\release\util.js:16:23)    at D:\GitHub\hexo\pagesHexo2023\node_modules\bluebird\js\release\using.js:185:26    at tryCatcher (D:\GitHub\hexo\pagesHexo2023\node_modules\bluebird\js\release\util.js:16:23)</code></pre><p>将.git和README.md分别加入忽略列表</p><blockquote><p>打开配置文件 _config.yml</p><p>找到忽略配置 skip_render</p><p>添加： [source&#x2F;.git&#x2F;**, ‘source&#x2F;README.md’]</p></blockquote><p>结果举例：</p><pre class=" language-yml"><code class="language-yml"># Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: [source/.git/**, 'source/README.md']</code></pre><p>参考：<a href="https://blog.csdn.net/x851288986/article/details/102548839">https://blog.csdn.net/x851288986/article/details/102548839</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postman显示二维码</title>
      <link href="/2023/05/17/postman-xian-shi-er-wei-ma/"/>
      <url>/2023/05/17/postman-xian-shi-er-wei-ma/</url>
      
        <content type="html"><![CDATA[<p>发送请求后，在响应体中直接显示二维码</p><ol><li>发送请求前，配置“Tests”</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 相应结果转成json对象result</span><span class="token keyword">var</span> data<span class="token operator">=</span><span class="token punctuation">{</span>    result<span class="token punctuation">:</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将数据中的qrcode解码后作为图片添加到标签img</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token string">'&lt;html>&lt;img src="data:image/jpg;base64, {{result.data.qrcode}}" width="200" height="200">&lt;/html>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置img标签可视化</span>pm<span class="token punctuation">.</span>visualizer<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> data<span class="token punctuation">)</span></code></pre><p>width和height按需设置，实测百分比失真</p><ol start="2"><li><p>查看二维码</p><p>在响应体 body - Visualize 可见</p></li><li><p>备注：响应的数据结构</p></li></ol><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"businessCode"</span><span class="token operator">:</span> <span class="token string">"775328844184948736"</span><span class="token punctuation">,</span>        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"deptCode"</span><span class="token operator">:</span> <span class="token string">"91320102724560399U"</span><span class="token punctuation">,</span>        <span class="token property">"qrcode"</span><span class="token operator">:</span> <span class="token string">"iVBORw0KG......base64str......JRU5ErkJggg=="</span><span class="token punctuation">,</span>        <span class="token property">"appkey"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"signTheme"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"applyTime"</span><span class="token operator">:</span> <span class="token string">"2022-11-10 12:00:01"</span><span class="token punctuation">,</span>        <span class="token property">"updateTime"</span><span class="token operator">:</span> <span class="token string">"2023-05-08 20:35:21"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"操作成功"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rest文件上传</title>
      <link href="/2023/05/17/rest-wen-jian-shang-chuan/"/>
      <url>/2023/05/17/rest-wen-jian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h4 id="上传多个文件"><a href="#上传多个文件" class="headerlink" title="上传多个文件"></a>上传多个文件</h4><p>上传时，在MultiValueMap对象中的同一个key中添加多个value，传递时会封装成数组</p><blockquote><p>key&#x3D;[value1, value2, value3]</p></blockquote><p>接收端</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/fileVerify/verifyFileBatch"</span><span class="token punctuation">,</span> consumes <span class="token operator">=</span> MediaType<span class="token punctuation">.</span>MULTIPART_FORM_DATA_VALUE<span class="token punctuation">)</span><span class="token keyword">public</span> Result <span class="token function">verifyFileBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"files"</span><span class="token punctuation">)</span> MultipartFile<span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"批量文件验证..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>请求端</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 测试：请求多文件验证  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestVerifyBatchTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String url <span class="token operator">=</span> <span class="token string">"http://192.168.200.163:8080/fileVerify/verifyFileBatch"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 组装header</span>    HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>MULTIPART_FORM_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 组装文件</span>    MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// file1, 加密后的文件1</span>    String filePath1 <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/1684290580318.file"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath1<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileSystemResource resource1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// file2, 加密后的文件2</span>    String filePath2 <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/1684290580318-2.file"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath2<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileSystemResource resource2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加到表单</span>    form<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"files"</span><span class="token punctuation">,</span> resource1<span class="token punctuation">)</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"files"</span><span class="token punctuation">,</span> resource2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送请求</span>    HttpEntity<span class="token operator">&lt;</span>MultiValueMap<span class="token operator">></span> requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token punctuation">(</span>form<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> responseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> requestEntity<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回的是密文</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"responseEntity={}"</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="通过byte-上传文件"><a href="#通过byte-上传文件" class="headerlink" title="通过byte[]上传文件"></a>通过byte[]上传文件</h4><p>有时，上传文件的数据源并不是来自于系统，不能使用FileSystemResource去调用文件上传接口</p><p>字节源依旧可以作为上传源</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>commandKey <span class="token operator">=</span> <span class="token string">"sysInfoUploadCommand"</span><span class="token punctuation">,</span> threadPoolKey <span class="token operator">=</span> <span class="token string">"sysInfoUploadThreadPool"</span><span class="token punctuation">,</span>            fallbackMethod <span class="token operator">=</span> <span class="token string">"sysInfoUploadFallBack"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> HystrixPropertiesManager<span class="token punctuation">.</span>EXECUTION_ISOLATION_THREAD_TIMEOUT_IN_MILLISECONDS<span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"6000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> HystrixPropertiesManager<span class="token punctuation">.</span>CIRCUIT_BREAKER_REQUEST_VOLUME_THRESHOLD<span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> HystrixPropertiesManager<span class="token punctuation">.</span>CIRCUIT_BREAKER_ERROR_THRESHOLD_PERCENTAGE<span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> HystrixPropertiesManager<span class="token punctuation">.</span>CIRCUIT_BREAKER_SLEEP_WINDOW_IN_MILLISECONDS<span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> YzyUploadRsp <span class="token function">sysInfoUpload</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileBytes<span class="token punctuation">,</span> String token<span class="token punctuation">)</span><span class="token punctuation">{</span>    MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ByteArrayResource fileAsResource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayResource</span><span class="token punctuation">(</span>fileBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// return new String(fileName.getBytes(StandardCharsets.UTF_8), StandardCharsets.US_ASCII);</span>            <span class="token keyword">return</span> fileName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> fileBytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span> fileAsResource<span class="token punctuation">)</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>MULTIPART_FORM_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Accept-Charset"</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Keep-Alive"</span><span class="token punctuation">,</span> <span class="token string">"timeout=60, max=1000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"authorization"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ref-secret-key"</span><span class="token punctuation">,</span> refSecretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename="</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    String url <span class="token operator">=</span> yjzServerDomain <span class="token operator">+</span> yzyUploadUri<span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求上传文件, url={}"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpEntity<span class="token operator">&lt;</span>MultiValueMap<span class="token operator">></span> requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token punctuation">(</span>form<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    ResponseEntity<span class="token operator">&lt;</span>UploadRsp<span class="token operator">></span> responseEntity <span class="token operator">=</span>        uploadRestTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> requestEntity<span class="token punctuation">,</span> UploadRsp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// restTemplate.postForEntity(url, requestEntity, UploadRsp.class);</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"上传文件结果: {}"</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>responseEntity<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>entity <span class="token operator">-</span><span class="token operator">></span> entity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is2xxSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>entity <span class="token operator">-</span><span class="token operator">></span> entity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">BussJsonException</span><span class="token punctuation">(</span><span class="token string">"上传文件失败"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="上传文件中文乱码"><a href="#上传文件中文乱码" class="headerlink" title="上传文件中文乱码"></a>上传文件中文乱码</h4><p>在低版本spring cloud（1.x）中上传文件时，对文件名使用了硬编码”US-ASCII”</p><blockquote><p>org.springframework.http.converter.FormHttpMessageConverter#getAsciiBytes(String name)</p></blockquote><p>解决方法为，复制该类，修改编码方式后，手动添加到restTemplate解析器中</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"uploadRestTemplate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> RestTemplate <span class="token function">uploadRest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// FormHttpMessageConverter在设置Part-Header编码时，使用了硬编码 US-ASCII，导致中文乱码</span>    <span class="token comment" spellcheck="true">// see: FormHttpMessageConverter#getAsciiBytes</span>    MyFormHttpMessageConverter fc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFormHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> partConverters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    partConverters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringHttpMessageConverter</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    partConverters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// fc.setMultipartCharset(StandardCharsets.UTF_8);</span>    fc<span class="token punctuation">.</span><span class="token function">setPartConverters</span><span class="token punctuation">(</span>partConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>    RestTemplate restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpsClientRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    restTemplate<span class="token punctuation">.</span><span class="token function">setMessageConverters</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>fc<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> restTemplate<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中，MyFormHttpMessageConverter是从FormHttpMessageConverter复制过来的类</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> restTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>toString太长的解决方案</title>
      <link href="/2023/05/16/tostring-tai-chang-de-jie-jue-fang-an/"/>
      <url>/2023/05/16/tostring-tai-chang-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p>适用于文件等大字符串的打印</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StrUtil<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ToStringStyle<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ObjectUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * toString 的格式化 * 1. 不打印null * 2. 限定参数的打印长度 * * 可能导致部分main方法中的bean对象toString方法不可用 * * e.g. * &lt;code> * *     @Override *     public String toString() { *         return ToStringBuilder.reflectionToString( *                 this, new MyNoNullStyle().setLimit("file")); *     } * * &lt;/code> * */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyNoNullStyle</span> <span class="token keyword">extends</span> <span class="token class-name">ToStringStyle</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 2347542971151578670L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 不打印的属性     */</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> exclude<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 限制长度的属性     */</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> limit<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 限制的长度值     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> limitLength <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置需要忽略打印的属性     * @param exclude 忽略列表     * @return this     */</span>    <span class="token keyword">public</span> MyNoNullStyle <span class="token function">setExclude</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> exclude<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>exclude <span class="token operator">=</span> exclude<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置需要限制打印的属性     * @param limit 限制的属性     * @return this     */</span>    <span class="token keyword">public</span> MyNoNullStyle <span class="token function">setLimit</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置需要限制打印的长度     * @param limitLength 限制长度，默认100     * @return this     */</span>    <span class="token keyword">public</span> MyNoNullStyle <span class="token function">setLimitLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> limitLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>limitLength <span class="token operator">=</span> limitLength<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span>StringBuffer buffer<span class="token punctuation">,</span> String fieldName<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> Boolean fullDetail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>exclude<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String es <span class="token operator">:</span> exclude<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldName<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>String ls <span class="token operator">:</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldName<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            value <span class="token operator">=</span> StrUtil<span class="token punctuation">.</span><span class="token function">brief</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limitLength<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> fullDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"NoNullStyle判断异常[{}]"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ToStringBuilder<span class="token punctuation">.</span><span class="token function">reflectionToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyNoNullStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLimit</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本（其一）</title>
      <link href="/2023/05/16/shell-jiao-ben-qi-yi/"/>
      <url>/2023/05/16/shell-jiao-ben-qi-yi/</url>
      
        <content type="html"><![CDATA[<p>来自于《计算机教育中缺失的一课》02</p><h4 id="案例脚本一"><a href="#案例脚本一" class="headerlink" title="案例脚本一"></a>案例脚本一</h4><p>创建一个目录，并切换到创建的目录</p><pre class=" language-sh"><code class="language-sh"># mcd.shmcd(){    mkdir -p "$1"    cd "$1"}</code></pre><p>可将mcd.sh 加载到当前对话框<code>source mcd.sh</code> ，之后，当前对话中就可以使用mcd方法了</p><h4 id="案例脚本二"><a href="#案例脚本二" class="headerlink" title="案例脚本二"></a>案例脚本二</h4><p>过滤指定文件，查询文件内容中是否包含“foobar”，</p><p>输出脚本运行的日期、脚本名、参数数量、进程号，</p><p>如果不包含，打印文件名，并将“# foobar”追加到文件尾</p><pre class=" language-sh"><code class="language-sh">#!/bin/bashecho "Starting program at $(date)" # Date will be substitutedecho "Running program $0 with $# arguments with pid $$"for file in "$@"; do    grep foobar "$file" > /dev/null 2> /dev/null    # When patten is not found, grep has exist status    # We redirect STDOUT and STDERR to a null register ...e about thme    if [[ "$?" -ne 0 ]]; then        echo "File $file does not have any foobar, adding one"        echo "# foobar" >> "$file"    fidone</code></pre><p>执行结果</p><pre class=" language-sh"><code class="language-sh">[root@support-192-168-200-163 test]# lsexample.sh  test1.txt  test2.txt  test3.txt  test4.txt  test5.txt[root@support-192-168-200-163 test]# sh example.sh test*Starting program at 2023年 05月 16日 星期二 17:49:22 CSTRunning program example.sh with 5 arguments with pid 28754File test2.txt does not have any foobar, adding oneFile test4.txt does not have any foobar, adding one[root@support-192-168-200-163 test]# cat test2.txt fobarcsacdaseceascaca# foobar</code></pre><p>说明：</p><ul><li>$(date)  取当前时间</li><li>$0 当前脚本文件名</li><li>$# 参数数量，如果有星号，优先计算星号</li><li>$$ 进程号</li><li>$@ 所有参数</li><li>2&gt; &#x2F;dev&#x2F;null   表示将错误信息重定向到null，也就是忽略掉错误提示信息的意思</li><li>$? 上一次执行脚本的结果码，0表示真，1表示假</li><li>-ne  不等于</li></ul><p>附注：</p><blockquote><p>-eq 等于，equals</p><p>-ne 不等于，no equals</p><p>-gt 大于，greater than</p><p>-lt 小于，less than</p><p>-ge 大于等于，greater equals</p><p>-le 小于等于，less equals</p></blockquote><h4 id="案例脚本三"><a href="#案例脚本三" class="headerlink" title="案例脚本三"></a>案例脚本三</h4><p>列举匹配的文件</p><pre class=" language-sh"><code class="language-sh">ls test*</code></pre><p>列举匹配的文件夹下的文件</p><pre class=" language-sh"><code class="language-sh">ls dir?</code></pre><p>参数匹配</p><pre class=" language-sh"><code class="language-sh">ll test{1,2,3}.txt# test1.txt test2.txt test3.txtll test{,1,2,3}.txt# test.txt test1.txt test2.txt test3.txttouch project{1,2}/src/test/test{1,2,3}.pyll test{1..3}.txt# test1.txt test2.txt test3.txt# 比较两个文件夹的不同diff <(ls foo) <(ls bar)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> 计算机教育中缺失的一课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码符号乱码</title>
      <link href="/2023/05/15/dai-ma-fu-hao-luan-ma/"/>
      <url>/2023/05/15/dai-ma-fu-hao-luan-ma/</url>
      
        <content type="html"><![CDATA[<ul><li>代码符号乱码</li></ul><p>找到仓库目录</p><pre class=" language-cmd"><code class="language-cmd">\node_modules\hexo-prism-plugin\src\index.js</code></pre><p>在变量中添加大括号的映射，e.g.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#39;'</span><span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#123;'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#125;'</span><span class="token punctuation">:</span> <span class="token string">'}'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>Typora和微软拼音冲突</li></ul><blockquote><p>在标题栏下面，多换行几次，在进入正文书写</p></blockquote><blockquote><p>保存后再编辑</p></blockquote><p>更大的可能是：tag或categories的yml格式不标准</p><p>tag后面如果不换行，则要跟一个空格再赋值</p><p>tag后面如果换行，则后面不能有空格</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jackson的序列化和反序列化</title>
      <link href="/2023/05/15/jackson-de-xu-lie-hua-he-fan-xu-lie-hua/"/>
      <url>/2023/05/15/jackson-de-xu-lie-hua-he-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<p>需要在属性上添加</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> Base64Serializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@JsonDeserialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> Base64Deserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">private</span> String documentId<span class="token punctuation">;</span></code></pre><p>序列化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base64Serializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> JsonGenerator jsonGenerator<span class="token punctuation">,</span> SerializerProvider serializerProvider<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对返回的非空字符串进行base64编码</span>            s <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        jsonGenerator<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>反序列化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base64Deserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Base64Deserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonParser jsonParser<span class="token punctuation">,</span> DeserializationContext deserializationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> JsonProcessingException <span class="token punctuation">{</span>        String text <span class="token operator">=</span> jsonParser<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">decodeBase64</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对非空的值，尝试base64解码，失败不改变原值     * @param text 待解码的字符串     * @return base64解码后的字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decodeBase64</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 对非空的值，尝试base64解码，失败不改变原值</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> txtBytes <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>txtBytes<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 解码失败，text原数返回</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> text<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> jackson </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
