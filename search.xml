<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>重新搭建hexo</title>
      <link href="/2023/06/01/chong-xin-da-jian-hexo/"/>
      <url>/2023/06/01/chong-xin-da-jian-hexo/</url>
      
        <content type="html"><![CDATA[<p>安装node.js</p><p>设置npm代理，数据源（淘宝）</p><pre class=" language-sh"><code class="language-sh">npm config set registry https://registry.npm.taobao.org</code></pre><p>查看镜像源</p><pre class=" language-cmd"><code class="language-cmd">npm get registry</code></pre><p>代理</p><pre class=" language-cmd"><code class="language-cmd"># 设置代理npm config set proxy http://server:port# 查询当前代理npm config get proxy</code></pre><p>npm的其他配置查询，比如缓存地址等</p><pre class=" language-cmd"><code class="language-cmd">C:\Users\EDY>npm config ls; "builtin" config from D:\Program Files\nodejs\node_modules\npm\npmrc; prefix = "C:\\Users\\EDY\\AppData\\Roaming\\npm" ; overridden by user; "user" config from C:\Users\EDY\.npmrccache = "D:\\Program Files\\nodejs\\node_cache"prefix = "D:\\Program Files\\nodejs\\node_global"registry = "https://registry.npm.taobao.org/"; node bin location = D:\Program Files\nodejs\node.exe; node version = v18.16.0; npm local prefix = C:\Users\EDY; npm version = 9.5.1; cwd = C:\Users\EDY; HOME = C:\Users\EDY; Run `npm config ls -l` to show all defaults.</code></pre><p>参考：</p><p><a href="https://www.jianshu.com/p/30ba1da2bde1">npm、yarn设置全局安装位置和缓存位置 - 简书 (jianshu.com)</a></p><p>安装hexo</p><pre class=" language-cmd"><code class="language-cmd">npm install -g hexo-cli</code></pre><p>查询安装地址</p><pre class=" language-cmd"><code class="language-cmd">npm list --depth=0 -g</code></pre><p>得到结果</p><blockquote><p>D:\Program Files\nodejs\node_global<br>&#96;– <a href="mailto:&#x68;&#x65;&#x78;&#111;&#x2d;&#x63;&#x6c;&#105;&#64;&#52;&#x2e;&#51;&#x2e;&#x31;">&#x68;&#x65;&#x78;&#111;&#x2d;&#x63;&#x6c;&#105;&#64;&#52;&#x2e;&#51;&#x2e;&#x31;</a></p></blockquote><p>把上述地址添加到环境变量中</p><p>重启电脑使环境变量生效</p><p>无法加载脚本</p><blockquote><p>无法加载文件 D:\Program Files\nodejs\node_global\hexo.ps1，因为在此系统上禁止运行脚本</p></blockquote><p>解决方案：</p><p>设置 – 隐私和安全性 – 开发者选项 – 允许本地PowerShell脚本在未签名的情况下运行</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据工具</title>
      <link href="/2023/05/24/shu-ju-gong-ju/"/>
      <url>/2023/05/24/shu-ju-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>来自于《计算机教育中缺失的一课》04</p><h4 id="简单正则"><a href="#简单正则" class="headerlink" title="简单正则"></a>简单正则</h4><p>将字符中a或者b抹除（替换为空字符），并输出</p><pre class=" language-sh"><code class="language-sh">echo 'abcaba' | sed -E 's/[ab]//'</code></pre><p>输出结果：bcaba</p><p>以上，正则只匹配一次，要多次匹配，在后面加g</p><pre class=" language-sh"><code class="language-sh">echo 'abcaba' | sed -E 's/[ab]//g'</code></pre><p>输出结果：c</p><p>有些指令并并不会生效，比如</p><pre class=" language-sh"><code class="language-sh">echo 'abcaba' | sed 's/(ab)*//g'</code></pre><p>输出结果：abcaba</p><p>我们需要添加参数E，使其支持更新的语法</p><pre class=" language-sh"><code class="language-sh">echo 'abcaba' | sed -E 's/(ab)*//g'</code></pre><p>输出结果：ca</p><p>或者通过转义符，告诉程序括号为括号</p><pre class=" language-sh"><code class="language-sh">echo 'abcaba' | sed 's/\(ab\)*//g'</code></pre><p>输出结果：ca</p><p>匹配后是即时删除的，比如</p><pre class=" language-sh"><code class="language-sh">echo 'abcababc' | sed -E 's/(ab|bc)*//g'</code></pre><p>输出结果：cc</p><p>[在线正则网站]<a href="https://regex101.com/">https://regex101.com/</a></p><h4 id="综合正则"><a href="#综合正则" class="headerlink" title="综合正则"></a>综合正则</h4><blockquote><p>vim 进入api-controller.log后，使用  “:%s  + 正则” 的方式可能查找不出来，或许跟行匹配有关</p><p>暂时没有找到原因</p></blockquote><p>读取日志</p><pre class=" language-sh"><code class="language-sh">cat api-controller.log</code></pre><p>过滤关键字，此时管道中的数据是按行输出，为之后的正则匹配提供了条件</p><pre class=" language-sh"><code class="language-sh">grep '源文件路径'</code></pre><p>对过滤出的每一行日志按正则过滤，并按组输出（起始组：1）</p><pre class=" language-sh"><code class="language-sh">sed -E 's/^.*\[([0-9a-z]{32})\]: .*:(esus.*pdf)$/\2/'</code></pre><p>其中 “\2” 表示第二组，正则中的小括号表示结果分组</p><p>打印组数据</p><pre class=" language-sh"><code class="language-sh">awk '{print $0}'</code></pre><p>以数据源为例：</p><p>2023-05-24 16:49:03.565 INFO  [http-nio-9001-exec-6] [c.b.c.s.w.c.DeleteSourceAspect_after:123] - [a9f3e9082bef43519c5d1917092d61ba]: 源文件路.:esus/web/2023/5/24/f8f79256991e27cbad615e406d9fd499439fbd044adf02cc4b183c9e0f39b23fgdfileflag82b-4433-837d-d14d5451.pdf</p><blockquote><p>查询链路ID：</p></blockquote><pre class=" language-sh"><code class="language-sh">cat api-controller.log | grep '源文件路径' | sed -E 's/^.*\[([0-9a-z]{32})\]: .*:(esus.*pdf)$/\1/' | awk '{print $1}'</code></pre><p>输出为：a9f3e9082bef43519c5d1917092d61ba</p><blockquote><p>查询文件路径：</p></blockquote><pre class=" language-sh"><code class="language-sh">cat api-controller.log | grep '源文件路径' | sed -E 's/^.*\[([0-9a-z]{32})\]: .*:(esus.*pdf)$/\2/' | awk '{print $1}'</code></pre><p>输出为：esus&#x2F;web&#x2F;2023&#x2F;5&#x2F;24&#x2F;f8f79256991e27cbad615e406d9fd499439fbd044adf02cc4b183c9e0f39b23fgdfileflag82b-4433-837d-d14d5451.pdf</p><p>更多参考：[数据整理] <a href="https://missing-semester-cn.github.io/2020/data-wrangling/">https://missing-semester-cn.github.io/2020/data-wrangling/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截和转发</title>
      <link href="/2023/05/23/lan-jie-he-zhuan-fa/"/>
      <url>/2023/05/23/lan-jie-he-zhuan-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="策略注入"><a href="#策略注入" class="headerlink" title="策略注入"></a>策略注入</h4><p>针对所有的 &#x2F;core&#x2F;ycApi 的接口路径进行拦截，拦截器为 YcForwardFilter。</p><p>存在 YcForwardFilter 实例时注入该策略</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>YcForwardFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> FilterRegistrationBean <span class="token function">myFilterRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FilterRegistrationBean registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注入过滤器</span>    registration<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>ycForwardFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置拦截规则</span>    registration<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/core/ycApi/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置拦截名称</span>    registration<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"ycFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置拦截顺序</span>    registration<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> registration<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>拦截器需要实现接口 Filter 中的 doFilter 方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拦截的逻辑</span><span class="token punctuation">}</span></code></pre><h4 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h4><p>拦截到请求后，可使用 filterChain 留在系统中处理，也可以转发出去</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">forwardFilter</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取转发路径</span>    String forwardUrl <span class="token operator">=</span> <span class="token function">getUrlByRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpRequestBase httpRequestBase <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 请求地址</span>    String uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此处为 application/x-www-form-urlencoded</span>    String query <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String urlParam <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>        query<span class="token punctuation">,</span>        Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>appKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"appkey="</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"random="</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>digest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"digest="</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"&amp;&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String newUrl <span class="token operator">=</span> forwardUrl <span class="token operator">+</span> uri <span class="token operator">+</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>urlParam<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"?"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接口转发：newUrl={}"</span><span class="token punctuation">,</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 设置请求方式</span>    String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求方式：method={}"</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>GET<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        httpRequestBase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span>newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        httpRequestBase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 设置请求头</span>    <span class="token function">copyRequestHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> httpRequestBase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重置请求头中的认证信息</span>    <span class="token comment" spellcheck="true">//        resetAuthInfo(httpRequestBase);</span>    <span class="token comment" spellcheck="true">// 4. 设置POST参数</span>    String contentType <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"contentType={}"</span><span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>httpRequestBase <span class="token keyword">instanceof</span> <span class="token class-name">HttpPost</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// application/json</span>            BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String body <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 请求中的空格不能去，为了发现空格</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request body={}"</span><span class="token punctuation">,</span> StrUtil<span class="token punctuation">.</span><span class="token function">brief</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpPost<span class="token punctuation">)</span> httpRequestBase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span>MULTIPART_FORM_DATA<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// multipart/form-data</span>            <span class="token function">copyFormData</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> httpRequestBase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"不支持 application/json、multipart/form-data 之外的POST类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. 连接设置</span>    RequestConfig config <span class="token operator">=</span> RequestConfig<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setConnectionRequestTimeout</span><span class="token punctuation">(</span>connectionRequestTimeout<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setSocketTimeout</span><span class="token punctuation">(</span>socketTimeout<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>connectionTimeout<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    httpRequestBase<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 6. 提交请求</span>    CloseableHttpClient httpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CloseableHttpResponse execute <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpRequestBase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印结果需要读取流，尽量不要对源数据进行处理，只打印响应码</span>    <span class="token keyword">int</span> statusCode <span class="token operator">=</span> execute<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"响应结果码：{}"</span><span class="token punctuation">,</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 7. 返回前的处理</span>    HttpEntity responseEntity <span class="token operator">=</span> execute<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 8. 设置响应头</span>    Header<span class="token punctuation">[</span><span class="token punctuation">]</span> responseHeaders <span class="token operator">=</span> execute<span class="token punctuation">.</span><span class="token function">getAllHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Header header <span class="token operator">:</span> responseHeaders<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Content-Length 和 Content-Encoding 不能同时存在，故两个属性都不复制</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>HTTP<span class="token punctuation">.</span>CONTENT_LEN<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span> HTTP<span class="token punctuation">.</span>TRANSFER_ENCODING<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"response header name={}, value={}"</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 复制响应头</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 9. 转发结果写入响应体</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> HttpStatus<span class="token punctuation">.</span>SC_NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 针对404单独处理</span>        <span class="token function">response404</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        responseEntity<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 针对404单独处理  * @param response 响应体  * @param path 请求URI  */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">response404</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> String path<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>ServletOutputStream outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        YcRspBase rsp404 <span class="token operator">=</span> YcRspBase<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span><span class="token string">"404"</span><span class="token punctuation">,</span> <span class="token string">"Not Found : "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>SC_NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str404 <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>rsp404<span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str404<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"写入数据到response失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 复制 POST 请求 form-data 请求方式中的请求数据  *  * @param request         待复制请求  * @param httpRequestBase 转发请求  * @throws IOException  * @throws ServletException  */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">copyFormData</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpRequestBase httpRequestBase<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 附带文件的请求，contentType后有数据描述，小数据为base64的值，大数据疑似为文件大小</span>    <span class="token comment" spellcheck="true">// e.g. multipart/form-data; boundary=--------------------------394758598706425280136232</span>    MultipartEntityBuilder entityBuilder <span class="token operator">=</span> MultipartEntityBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 防止中文文件名导致的乱码</span>        <span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span>HttpMultipartMode<span class="token punctuation">.</span>RFC6532<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// multipart/form-data 时才能获取，否则报错</span>    Collection<span class="token operator">&lt;</span>Part<span class="token operator">></span> parts <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数据为文件时，Content-Type 中含有长度信息 [boundary]，需要去除长度</span>        httpRequestBase<span class="token punctuation">.</span><span class="token function">removeHeaders</span><span class="token punctuation">(</span>HTTP<span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Part part <span class="token operator">:</span> parts<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                InputStream is <span class="token operator">=</span> part<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                entityBuilder<span class="token punctuation">.</span><span class="token function">addBinaryBody</span><span class="token punctuation">(</span>                    part<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    is<span class="token punctuation">,</span>                    ContentType<span class="token punctuation">.</span>APPLICATION_OCTET_STREAM<span class="token punctuation">,</span>                    part<span class="token punctuation">.</span><span class="token function">getSubmittedFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"copy part failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 流读取放在 getParameterMap 之前，防止读取一次后数据丢失</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 多个重复的 k 会在 v[] 数组中处理，一般不建议传数组 or 后续再处理</span>    <span class="token comment" spellcheck="true">//        parameterMap.forEach((k, v) -> entityBuilder.addTextBody(k, v[0]));</span>    parameterMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> entityBuilder<span class="token punctuation">.</span><span class="token function">addTextBody</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpPost<span class="token punctuation">)</span> httpRequestBase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>entityBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 复制请求中的请求头  * &lt;p>  * 1. 不能设置 Content-Length 的值，让 CloseableHttpClient 自动设置  * 2. multipart/form-data 不能复制请求头，错误的请求头，会导致接收端文件读取不到，委托 CloseableHttpClient 自动设置  *  * @param request         原请求  * @param httpRequestBase 转发请求  */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">copyRequestHeader</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpRequestBase httpRequestBase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> headerNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>headerNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> headerNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>HTTP<span class="token punctuation">.</span>CONTENT_LEN<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不设置header长度</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String value <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"request header key={}, value={}"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpRequestBase<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h4><h5 id="spring处理异常"><a href="#spring处理异常" class="headerlink" title="spring处理异常"></a>spring处理异常</h5><p>需要借助 HandlerExceptionResolver 异常处理器来协助我们处理局部异常</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"handlerExceptionResolver"</span><span class="token punctuation">)</span><span class="token keyword">private</span> HandlerExceptionResolver exceptionResolver<span class="token punctuation">;</span></code></pre><p>HandlerExceptionResolver 是个多实例注入对象，Spring MVC 使用的实例名为 handlerExceptionResolver<br>但是注入的也不是单个处理器，而是 HandlerExceptionResolverComposite 对象，持有多个处理器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerExceptionResolverComposite</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>HandlerExceptionResolver<span class="token operator">></span> resolvers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> order <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>通过处理器中的 resolveException 方法，将拦截器中的异常捕获并统一处理</p><pre class=" language-java"><code class="language-java">exceptionResolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> null<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上方法会将异常交给spring处理</p><h5 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h5><p>有时因对接不同的系统，要求不同的返回数据结构，我们会要求指定异常处理类</p><p>获取该controller的引用（也许不需要）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> YcApiController ycController<span class="token punctuation">;</span></code></pre><p>在 resolveException 指定方法handler对象</p><pre class=" language-java"><code class="language-java">HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">(</span>ycController<span class="token punctuation">,</span> ycController<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exceptionResolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>正常情况下，请求在servlet分发时，会匹配到 HandlerMethod</p><p>如果没有特别的需求，找到controller对应的Advice即可</p><p>备注，exceptionResolver在处理 basePackageClasses 指定的类时，匹配的是同包及其子包</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> ServletInvocableHandlerMethod <span class="token function">getExceptionHandlerMethod</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> HandlerMethod handlerMethod<span class="token punctuation">,</span> Exception exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> handlerType <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法handler在这里转换成类型</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handlerMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        handlerType <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getBeanType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExceptionHandlerMethodResolver resolver <span class="token operator">=</span> <span class="token punctuation">(</span>ExceptionHandlerMethodResolver<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionHandlerCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolver <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionHandlerMethodResolver</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>exceptionHandlerCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">,</span> resolver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>var9<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>ControllerAdviceBean<span class="token punctuation">,</span> ExceptionHandlerMethodResolver<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>var9<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ControllerAdviceBean advice <span class="token operator">=</span> <span class="token punctuation">(</span>ControllerAdviceBean<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 这里会检查basePackages和类型，handlerType为空将交由下一个Advice处理异常</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>advice<span class="token punctuation">.</span><span class="token function">isApplicableToBeanType</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             ExceptionHandlerMethodResolver resolver <span class="token operator">=</span> <span class="token punctuation">(</span>ExceptionHandlerMethodResolver<span class="token punctuation">)</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Method method <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolveMethod</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletInvocableHandlerMethod</span><span class="token punctuation">(</span>advice<span class="token punctuation">.</span><span class="token function">resolveBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在Advice类头指定basePackages时的生效地</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// org.springframework.web.method.HandlerTypePredicate</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasSelectors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// basePackages 是以'com.xx.xxx.'方式存储，表示的是注解的当前包及其子包</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>basePackages<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>assignableTypes<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>annotations<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>    HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 转发</span>        <span class="token function">forwardFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"转发服务异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 交给Spring的异常解析器去处理</span>        <span class="token comment" spellcheck="true">//            exceptionResolver.resolveException(request, response, null, e);</span>        <span class="token comment" spellcheck="true">// 必须得传 HandlerMethod 否则会走GlobalExceptionHandler，而不是指定的YcApiAdvice</span>        <span class="token comment" spellcheck="true">// 没有通过servlet进行分发，因此没有获取到方法对象</span>        <span class="token comment" spellcheck="true">// 如有必要再添加对方法的匹配，这里默认去找Controller的第一个方法</span>        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">(</span>ycController<span class="token punctuation">,</span> ycController<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exceptionResolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="自定义异常捕获"><a href="#自定义异常捕获" class="headerlink" title="自定义异常捕获"></a>自定义异常捕获</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 会捕获指定类[basePackageClasses]同包及其子包下的异常 * 拥有类包及其子包下异常捕获的最高优先级 * * @author ** * @date 2023/04/18 09:42:50 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> YcApiController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YcApiAdvice</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 参数校验未通过     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> YcRspBase <span class="token function">methodArgumentNotValidExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"MethodArgumentNotValidException {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectError objectError <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> YcRspBase<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span><span class="token string">"80111016"</span><span class="token punctuation">,</span> objectError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/2023/05/22/vim/"/>
      <url>/2023/05/22/vim/</url>
      
        <content type="html"><![CDATA[<p>来自于《计算机教育中缺失的一课》03 Editors（vim）</p><h4 id="普通指令"><a href="#普通指令" class="headerlink" title="普通指令"></a>普通指令</h4><p>分窗<code>:sp</code> 使用<code>ctrl+w</code>在两个窗口之间进行切换（并非同行），使用<code>:qa</code>关闭所有窗口</p><p>普通模式下，使用j（jump）跳到下一行，使用k返回上一行，光标移动键：hjkl</p><p>光标按单词移动：wbe，w下一个单词，b上一个单词，e（下一个）单词尾</p><p>移动到行首：0，其他数字没效果</p><p>移动到行首：^</p><p>移动到行尾：$</p><p>上下滚动：ctrl+U,ctrl+D：upper和down</p><p>顶底切换：shift + g移动到文档底部，gg移动到文档顶部</p><p>在当前视图页移动：L（视图底 lower），M（视图中央行首 middle），H（视图顶 Header）<br>当前行中查找： f+要查找的字母或数字，查找范围：(光标位置，行尾]，查找目标区分大小写，不支持next</p><p>当前行中反向查找： F+要查找的字母或数字</p><p>删除：x删除单个字符，dw删除单词，de删除至单词尾</p><p>撤销：u（undo）</p><p>复制粘贴：yp，y复制，yy复制行，yw复制单词，p粘贴</p><p>配合视图模式（v）和光标操作（hjkl）来复制指定的文本</p><p>shift + v（V）进入行视图模式</p><p>ctrl + v 进入视图块模式</p><h4 id="组合指令"><a href="#组合指令" class="headerlink" title="组合指令"></a>组合指令</h4><p>跳到上一个单词，进入视图模式，选中下三个单词</p><pre class=" language-vim"><code class="language-vim">bveee</code></pre><p>向下跳4行</p><pre class=" language-vim"><code class="language-vim">4j</code></pre><p>向上跳4行</p><pre class=" language-vim"><code class="language-vim">4k</code></pre><p>删除7个单词</p><pre class=" language-vim"><code class="language-vim">7dw</code></pre><p>删除中括号中的数据，并开始插入（比如md文件）</p><pre class=" language-vim"><code class="language-vim"><span class="token builtin">ci</span><span class="token punctuation">[</span></code></pre><p>同理小括号</p><pre class=" language-vim"><code class="language-vim"><span class="token function">ci</span><span class="token punctuation">(</span></code></pre><p>在括号上可以使用百分号（%）在两端左右横跳</p><p>删除括号及其内容</p><pre class=" language-vim"><code class="language-vim"><span class="token function">da</span><span class="token punctuation">(</span></code></pre><p>重复上一次的编辑命令：逗号</p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本其二</title>
      <link href="/2023/05/22/shell-jiao-ben-qi-er/"/>
      <url>/2023/05/22/shell-jiao-ben-qi-er/</url>
      
        <content type="html"><![CDATA[<p>来自于《计算机教育中缺失的一课》02</p><h4 id="shell脚本其二"><a href="#shell脚本其二" class="headerlink" title="shell脚本其二"></a>shell脚本其二</h4><p>查询符合要求的文件，并执行删除</p><pre class=" language-sh"><code class="language-sh"># 查询文件:文件夹名称以node开头，类型为文件夹，修改时间为1天find . -name "node*" -type d -mtime -l# 查找缓存文件find . -name "*.tmp" # 查找并删除find . -name "*.tmp" -exec rm {} \;# 查看上一次执行命令的结果echo $?</code></pre><p>查看文件树</p><pre class=" language-sh"><code class="language-sh">tree</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解标记要修改的属性</title>
      <link href="/2023/05/19/zhu-jie-biao-ji-yao-xiu-gai-de-shu-xing/"/>
      <url>/2023/05/19/zhu-jie-biao-ji-yao-xiu-gai-de-shu-xing/</url>
      
        <content type="html"><![CDATA[<h4 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h4><blockquote><ul><li><p>根据注解 SealAuthId 去查找要标记位的属性，并修改其值</p></li><li><p>如果直属属性中没有修改的属性，而是在其子孙属性中，则通过 SealAuthId (CONTAIN) 引导程序到子属性中去查找</p></li><li><p>直到找到标记 SealAuthId (AUTH_ID) 的属性，执行修改方法</p></li></ul></blockquote><h4 id="标记属性"><a href="#标记属性" class="headerlink" title="标记属性"></a>标记属性</h4><p>待处理对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YcDTO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SealAuthId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> SealAuthId<span class="token punctuation">.</span>CONTAIN<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Valid</span>    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"信息列表[dataList]不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>YcSignatories<span class="token operator">></span> dataList<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>子对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YcSignatories</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SealAuthId</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"编码[sealId]不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String sealId<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="注解查找"><a href="#注解查找" class="headerlink" title="注解查找"></a>注解查找</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 找到dto对象中注解标记的 SealAuthId(AUTH_ID) 并执行方法 function  * @param dto 待查找的对象  * @param function 找到注解标记后执行的方法  */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findAnnotationAndDo</span><span class="token punctuation">(</span>Object dto<span class="token punctuation">,</span> Function function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"dto is NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> parameterObjectClass <span class="token operator">=</span> dto<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> parameterObjectClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span><span class="token punctuation">{</span>        SealAuthId sealAuthId <span class="token operator">=</span> AnnotationUtils<span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> SealAuthId<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>sealAuthId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"查找到注解@SealAuthId[{}]"</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>SealAuthId<span class="token punctuation">.</span>AUTH_ID<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sealAuthId<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">annotateParameterDo</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> field<span class="token punctuation">,</span> function<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>SealAuthId<span class="token punctuation">.</span>CONTAIN<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sealAuthId<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">annotateContainSearch</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> field<span class="token punctuation">,</span> function<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 查找到包含注解的对象，准备进行下一步查找  * 在标记 CONTAIN 属性中继续查找，直到查找到标记 AUTH_ID  * @param dto 待查找的对象  * @param function 找到注解标记 AUTH_ID 后执行的方法  * @param field 注解标记为“CONTAIN”的属性  */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">annotateContainSearch</span><span class="token punctuation">(</span>Object dto<span class="token punctuation">,</span> Field field<span class="token punctuation">,</span> Function function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>field<span class="token punctuation">.</span><span class="token function">isAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object objContain <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>objContain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{} is NULL, continue."</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 属性有值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Collection<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{} is collection"</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Iterator iterator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> objContain<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 遍历查询集合中的对象中的注解</span>                <span class="token comment" spellcheck="true">// 因为是从请求参数中反序列化得来的，暂时不考虑循环引用问题</span>                <span class="token function">findAnnotationAndDo</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> function<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{} is obj"</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 因为是从请求参数中反序列化得来的，暂时不考虑循环引用问题</span>            <span class="token function">findAnnotationAndDo</span><span class="token punctuation">(</span>objContain<span class="token punctuation">,</span> function<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 查找到注解标记 AUTH_ID 的属性，执行操作  * @param dto 待查找的对象  * @param function 找到注解标记 AUTH_ID 后执行的方法  * @param field 注解标记为 AUTH_ID 的属性  */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">annotateParameterDo</span><span class="token punctuation">(</span>Object dto<span class="token punctuation">,</span> Field field<span class="token punctuation">,</span> Function function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>field<span class="token punctuation">.</span><span class="token function">isAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原值</span>        Object localValue <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 修改值的方法效用</span>            Object apply <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>localValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过对象的setter方法重置属性的值</span>            field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dto<span class="token punctuation">,</span> apply<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"修改注解标记的{}: {} => {}"</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> localValue<span class="token punctuation">,</span> apply<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defaultBind</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">,</span> SealBind sealBind<span class="token punctuation">)</span><span class="token punctuation">{</span>    Object param <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    SealAuthUtils<span class="token punctuation">.</span><span class="token function">findAnnotationAndDo</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> sealCode <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>sealCode<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sealCode <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">findSealCodeByAuthId</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> sealCode<span class="token punctuation">,</span> sealBind<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 维持不变</span>        <span class="token keyword">return</span> sealCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> annotate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo调试_其一</title>
      <link href="/2023/05/17/hexo-diao-shi-qi-yi/"/>
      <url>/2023/05/17/hexo-diao-shi-qi-yi/</url>
      
        <content type="html"><![CDATA[<h4 id="编译忽略文件或文件夹"><a href="#编译忽略文件或文件夹" class="headerlink" title="编译忽略文件或文件夹"></a>编译忽略文件或文件夹</h4><p>场景：将source添加到git仓库，hexo server报错</p><pre class=" language-cmd"><code class="language-cmd">INFO  Validating configINFO  Start processingINFO  Hexo is running at http://localhost:5555/ . Press Ctrl+C to stop.Unhandled rejection WarehouseError: ID `source/.git/logs/refs/heads/main` has been used    at new WarehouseError (D:\GitHub\hexo\pagesHexo2023\node_modules\warehouse\lib\error.js:14:11)    at _Model._insertOne (D:\GitHub\hexo\pagesHexo2023\node_modules\warehouse\lib\model.js:153:29)    at D:\GitHub\hexo\pagesHexo2023\node_modules\warehouse\lib\model.js:179:63    at tryCatcher (D:\GitHub\hexo\pagesHexo2023\node_modules\bluebird\js\release\util.js:16:23)    at D:\GitHub\hexo\pagesHexo2023\node_modules\bluebird\js\release\using.js:185:26    at tryCatcher (D:\GitHub\hexo\pagesHexo2023\node_modules\bluebird\js\release\util.js:16:23)</code></pre><p>将.git和README.md分别加入忽略列表</p><blockquote><p>打开配置文件 _config.yml</p><p>找到忽略配置 skip_render</p><p>添加： [source&#x2F;.git&#x2F;**, ‘source&#x2F;README.md’]</p></blockquote><p>结果举例：</p><pre class=" language-yml"><code class="language-yml"># Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render: [source/.git/**, 'source/README.md']</code></pre><p>参考：<a href="https://blog.csdn.net/x851288986/article/details/102548839">https://blog.csdn.net/x851288986/article/details/102548839</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postman显示二维码</title>
      <link href="/2023/05/17/postman-xian-shi-er-wei-ma/"/>
      <url>/2023/05/17/postman-xian-shi-er-wei-ma/</url>
      
        <content type="html"><![CDATA[<p>发送请求后，在响应体中直接显示二维码</p><ol><li>发送请求前，配置“Tests”</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 相应结果转成json对象result</span><span class="token keyword">var</span> data<span class="token operator">=</span><span class="token punctuation">{</span>    result<span class="token punctuation">:</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将数据中的qrcode解码后作为图片添加到标签img</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token string">'&lt;html>&lt;img src="data:image/jpg;base64, {{result.data.qrcode}}" width="200" height="200">&lt;/html>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置img标签可视化</span>pm<span class="token punctuation">.</span>visualizer<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> data<span class="token punctuation">)</span></code></pre><p>width和height按需设置，实测百分比失真</p><ol start="2"><li><p>查看二维码</p><p>在响应体 body - Visualize 可见</p></li><li><p>备注：响应的数据结构</p></li></ol><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"businessCode"</span><span class="token operator">:</span> <span class="token string">"775328844184948736"</span><span class="token punctuation">,</span>        <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"deptCode"</span><span class="token operator">:</span> <span class="token string">"91320102724560399U"</span><span class="token punctuation">,</span>        <span class="token property">"qrcode"</span><span class="token operator">:</span> <span class="token string">"iVBORw0KG......base64str......JRU5ErkJggg=="</span><span class="token punctuation">,</span>        <span class="token property">"appkey"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"signTheme"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"applyTime"</span><span class="token operator">:</span> <span class="token string">"2022-11-10 12:00:01"</span><span class="token punctuation">,</span>        <span class="token property">"updateTime"</span><span class="token operator">:</span> <span class="token string">"2023-05-08 20:35:21"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"操作成功"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rest文件上传</title>
      <link href="/2023/05/17/rest-wen-jian-shang-chuan/"/>
      <url>/2023/05/17/rest-wen-jian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h4 id="上传多个文件"><a href="#上传多个文件" class="headerlink" title="上传多个文件"></a>上传多个文件</h4><p>上传时，在MultiValueMap对象中的同一个key中添加多个value，传递时会封装成数组</p><blockquote><p>key&#x3D;[value1, value2, value3]</p></blockquote><p>接收端</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/fileVerify/verifyFileBatch"</span><span class="token punctuation">,</span> consumes <span class="token operator">=</span> MediaType<span class="token punctuation">.</span>MULTIPART_FORM_DATA_VALUE<span class="token punctuation">)</span><span class="token keyword">public</span> Result <span class="token function">verifyFileBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"files"</span><span class="token punctuation">)</span> MultipartFile<span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token punctuation">)</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"批量文件验证..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>请求端</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 测试：请求多文件验证  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestVerifyBatchTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String url <span class="token operator">=</span> <span class="token string">"http://192.168.200.163:8080/fileVerify/verifyFileBatch"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 组装header</span>    HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>MULTIPART_FORM_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 组装文件</span>    MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// file1, 加密后的文件1</span>    String filePath1 <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/1684290580318.file"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath1<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileSystemResource resource1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// file2, 加密后的文件2</span>    String filePath2 <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/1684290580318-2.file"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath2<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileSystemResource resource2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加到表单</span>    form<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"files"</span><span class="token punctuation">,</span> resource1<span class="token punctuation">)</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"files"</span><span class="token punctuation">,</span> resource2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送请求</span>    HttpEntity<span class="token operator">&lt;</span>MultiValueMap<span class="token operator">></span> requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token punctuation">(</span>form<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> responseEntity <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> requestEntity<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回的是密文</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"responseEntity={}"</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="通过byte-上传文件"><a href="#通过byte-上传文件" class="headerlink" title="通过byte[]上传文件"></a>通过byte[]上传文件</h4><p>有时，上传文件的数据源并不是来自于系统，不能使用FileSystemResource去调用文件上传接口</p><p>字节源依旧可以作为上传源</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>commandKey <span class="token operator">=</span> <span class="token string">"sysInfoUploadCommand"</span><span class="token punctuation">,</span> threadPoolKey <span class="token operator">=</span> <span class="token string">"sysInfoUploadThreadPool"</span><span class="token punctuation">,</span>            fallbackMethod <span class="token operator">=</span> <span class="token string">"sysInfoUploadFallBack"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> HystrixPropertiesManager<span class="token punctuation">.</span>EXECUTION_ISOLATION_THREAD_TIMEOUT_IN_MILLISECONDS<span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"6000"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> HystrixPropertiesManager<span class="token punctuation">.</span>CIRCUIT_BREAKER_REQUEST_VOLUME_THRESHOLD<span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> HystrixPropertiesManager<span class="token punctuation">.</span>CIRCUIT_BREAKER_ERROR_THRESHOLD_PERCENTAGE<span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> HystrixPropertiesManager<span class="token punctuation">.</span>CIRCUIT_BREAKER_SLEEP_WINDOW_IN_MILLISECONDS<span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"10000"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> YzyUploadRsp <span class="token function">sysInfoUpload</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileBytes<span class="token punctuation">,</span> String token<span class="token punctuation">)</span><span class="token punctuation">{</span>    MultiValueMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ByteArrayResource fileAsResource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayResource</span><span class="token punctuation">(</span>fileBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// return new String(fileName.getBytes(StandardCharsets.UTF_8), StandardCharsets.US_ASCII);</span>            <span class="token keyword">return</span> fileName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> fileBytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span> fileAsResource<span class="token punctuation">)</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>MULTIPART_FORM_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Accept-Charset"</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Keep-Alive"</span><span class="token punctuation">,</span> <span class="token string">"timeout=60, max=1000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"authorization"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ref-secret-key"</span><span class="token punctuation">,</span> refSecretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename="</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    String url <span class="token operator">=</span> yjzServerDomain <span class="token operator">+</span> yzyUploadUri<span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求上传文件, url={}"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpEntity<span class="token operator">&lt;</span>MultiValueMap<span class="token operator">></span> requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token punctuation">(</span>form<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    ResponseEntity<span class="token operator">&lt;</span>UploadRsp<span class="token operator">></span> responseEntity <span class="token operator">=</span>        uploadRestTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> requestEntity<span class="token punctuation">,</span> UploadRsp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// restTemplate.postForEntity(url, requestEntity, UploadRsp.class);</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"上传文件结果: {}"</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>responseEntity<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>entity <span class="token operator">-</span><span class="token operator">></span> entity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is2xxSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>entity <span class="token operator">-</span><span class="token operator">></span> entity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">BussJsonException</span><span class="token punctuation">(</span><span class="token string">"上传文件失败"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="上传文件中文乱码"><a href="#上传文件中文乱码" class="headerlink" title="上传文件中文乱码"></a>上传文件中文乱码</h4><p>在低版本spring cloud（1.x）中上传文件时，对文件名使用了硬编码”US-ASCII”</p><blockquote><p>org.springframework.http.converter.FormHttpMessageConverter#getAsciiBytes(String name)</p></blockquote><p>解决方法为，复制该类，修改编码方式后，手动添加到restTemplate解析器中</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"uploadRestTemplate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> RestTemplate <span class="token function">uploadRest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// FormHttpMessageConverter在设置Part-Header编码时，使用了硬编码 US-ASCII，导致中文乱码</span>    <span class="token comment" spellcheck="true">// see: FormHttpMessageConverter#getAsciiBytes</span>    MyFormHttpMessageConverter fc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFormHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> partConverters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    partConverters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringHttpMessageConverter</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    partConverters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// fc.setMultipartCharset(StandardCharsets.UTF_8);</span>    fc<span class="token punctuation">.</span><span class="token function">setPartConverters</span><span class="token punctuation">(</span>partConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>    RestTemplate restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpsClientRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    restTemplate<span class="token punctuation">.</span><span class="token function">setMessageConverters</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>fc<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> restTemplate<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中，MyFormHttpMessageConverter是从FormHttpMessageConverter复制过来的类</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> restTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>toString太长的解决方案</title>
      <link href="/2023/05/16/tostring-tai-chang-de-jie-jue-fang-an/"/>
      <url>/2023/05/16/tostring-tai-chang-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p>适用于文件等大字符串的打印</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StrUtil<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ToStringStyle<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ObjectUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * toString 的格式化 * 1. 不打印null * 2. 限定参数的打印长度 * * 可能导致部分main方法中的bean对象toString方法不可用 * * e.g. * &lt;code> * *     @Override *     public String toString() { *         return ToStringBuilder.reflectionToString( *                 this, new MyNoNullStyle().setLimit("file")); *     } * * &lt;/code> * */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyNoNullStyle</span> <span class="token keyword">extends</span> <span class="token class-name">ToStringStyle</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 2347542971151578670L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 不打印的属性     */</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> exclude<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 限制长度的属性     */</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> limit<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 限制的长度值     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> limitLength <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置需要忽略打印的属性     * @param exclude 忽略列表     * @return this     */</span>    <span class="token keyword">public</span> MyNoNullStyle <span class="token function">setExclude</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> exclude<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>exclude <span class="token operator">=</span> exclude<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置需要限制打印的属性     * @param limit 限制的属性     * @return this     */</span>    <span class="token keyword">public</span> MyNoNullStyle <span class="token function">setLimit</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置需要限制打印的长度     * @param limitLength 限制长度，默认100     * @return this     */</span>    <span class="token keyword">public</span> MyNoNullStyle <span class="token function">setLimitLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> limitLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>limitLength <span class="token operator">=</span> limitLength<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span>StringBuffer buffer<span class="token punctuation">,</span> String fieldName<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> Boolean fullDetail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>exclude<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String es <span class="token operator">:</span> exclude<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldName<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>String ls <span class="token operator">:</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldName<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            value <span class="token operator">=</span> StrUtil<span class="token punctuation">.</span><span class="token function">brief</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limitLength<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> fullDetail<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"NoNullStyle判断异常[{}]"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ToStringBuilder<span class="token punctuation">.</span><span class="token function">reflectionToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyNoNullStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLimit</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本（其一）</title>
      <link href="/2023/05/16/shell-jiao-ben-qi-yi/"/>
      <url>/2023/05/16/shell-jiao-ben-qi-yi/</url>
      
        <content type="html"><![CDATA[<p>来自于《计算机教育中缺失的一课》02</p><h4 id="案例脚本一"><a href="#案例脚本一" class="headerlink" title="案例脚本一"></a>案例脚本一</h4><p>创建一个目录，并切换到创建的目录</p><pre class=" language-sh"><code class="language-sh"># mcd.shmcd(){    mkdir -p "$1"    cd "$1"}</code></pre><p>可将mcd.sh 加载到当前对话框<code>source mcd.sh</code> ，之后，当前对话中就可以使用mcd方法了</p><h4 id="案例脚本二"><a href="#案例脚本二" class="headerlink" title="案例脚本二"></a>案例脚本二</h4><p>过滤指定文件，查询文件内容中是否包含“foobar”，</p><p>输出脚本运行的日期、脚本名、参数数量、进程号，</p><p>如果不包含，打印文件名，并将“# foobar”追加到文件尾</p><pre class=" language-sh"><code class="language-sh">#!/bin/bashecho "Starting program at $(date)" # Date will be substitutedecho "Running program $0 with $# arguments with pid $$"for file in "$@"; do    grep foobar "$file" > /dev/null 2> /dev/null    # When patten is not found, grep has exist status    # We redirect STDOUT and STDERR to a null register ...e about thme    if [[ "$?" -ne 0 ]]; then        echo "File $file does not have any foobar, adding one"        echo "# foobar" >> "$file"    fidone</code></pre><p>执行结果</p><pre class=" language-sh"><code class="language-sh">[root@support-192-168-200-163 test]# lsexample.sh  test1.txt  test2.txt  test3.txt  test4.txt  test5.txt[root@support-192-168-200-163 test]# sh example.sh test*Starting program at 2023年 05月 16日 星期二 17:49:22 CSTRunning program example.sh with 5 arguments with pid 28754File test2.txt does not have any foobar, adding oneFile test4.txt does not have any foobar, adding one[root@support-192-168-200-163 test]# cat test2.txt fobarcsacdaseceascaca# foobar</code></pre><p>说明：</p><ul><li>$(date)  取当前时间</li><li>$0 当前脚本文件名</li><li>$# 参数数量，如果有星号，优先计算星号</li><li>$$ 进程号</li><li>$@ 所有参数</li><li>2&gt; &#x2F;dev&#x2F;null   表示将错误信息重定向到null，也就是忽略掉错误提示信息的意思</li><li>$? 上一次执行脚本的结果码，0表示真，1表示假</li><li>-ne  不等于</li></ul><p>附注：</p><blockquote><p>-eq 等于，equals</p><p>-ne 不等于，no equals</p><p>-gt 大于，greater than</p><p>-lt 小于，less than</p><p>-ge 大于等于，greater equals</p><p>-le 小于等于，less equals</p></blockquote><h4 id="案例脚本三"><a href="#案例脚本三" class="headerlink" title="案例脚本三"></a>案例脚本三</h4><p>列举匹配的文件</p><pre class=" language-sh"><code class="language-sh">ls test*</code></pre><p>列举匹配的文件夹下的文件</p><pre class=" language-sh"><code class="language-sh">ls dir?</code></pre><p>参数匹配</p><pre class=" language-sh"><code class="language-sh">ll test{1,2,3}.txt# test1.txt test2.txt test3.txtll test{,1,2,3}.txt# test.txt test1.txt test2.txt test3.txttouch project{1,2}/src/test/test{1,2,3}.pyll test{1..3}.txt# test1.txt test2.txt test3.txt# 比较两个文件夹的不同diff <(ls foo) <(ls bar)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码符号乱码</title>
      <link href="/2023/05/15/dai-ma-fu-hao-luan-ma/"/>
      <url>/2023/05/15/dai-ma-fu-hao-luan-ma/</url>
      
        <content type="html"><![CDATA[<ul><li>代码符号乱码</li></ul><p>找到仓库目录</p><pre class=" language-cmd"><code class="language-cmd">\node_modules\hexo-prism-plugin\src\index.js</code></pre><p>在变量中添加大括号的映射，e.g.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#39;'</span><span class="token punctuation">:</span> <span class="token string">'\''</span><span class="token punctuation">,</span>  <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#123;'</span><span class="token punctuation">:</span> <span class="token string">'{'</span><span class="token punctuation">,</span>  <span class="token string">'&amp;#125;'</span><span class="token punctuation">:</span> <span class="token string">'}'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>Typora和微软拼音冲突</li></ul><blockquote><p>在标题栏下面，多换行几次，在进入正文书写</p></blockquote><blockquote><p>保存后再编辑</p></blockquote><p>更大的可能是：tag或categories的yml格式不标准</p><p>tag后面如果不换行，则要跟一个空格再赋值</p><p>tag后面如果换行，则后面不能有空格</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jackson的序列化和反序列化</title>
      <link href="/2023/05/15/jackson-de-xu-lie-hua-he-fan-xu-lie-hua/"/>
      <url>/2023/05/15/jackson-de-xu-lie-hua-he-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<p>需要在属性上添加</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> Base64Serializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@JsonDeserialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> Base64Deserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">private</span> String documentId<span class="token punctuation">;</span></code></pre><p>序列化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base64Serializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> JsonGenerator jsonGenerator<span class="token punctuation">,</span> SerializerProvider serializerProvider<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对返回的非空字符串进行base64编码</span>            s <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        jsonGenerator<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>反序列化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Base64Deserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Base64Deserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonParser jsonParser<span class="token punctuation">,</span> DeserializationContext deserializationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> JsonProcessingException <span class="token punctuation">{</span>        String text <span class="token operator">=</span> jsonParser<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">decodeBase64</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对非空的值，尝试base64解码，失败不改变原值     * @param text 待解码的字符串     * @return base64解码后的字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">decodeBase64</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 对非空的值，尝试base64解码，失败不改变原值</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> txtBytes <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>txtBytes<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 解码失败，text原数返回</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> text<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> jackson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/12/hello-world/"/>
      <url>/2023/05/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
